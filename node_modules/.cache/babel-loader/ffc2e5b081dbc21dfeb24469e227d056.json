{"ast":null,"code":"import { snakeCase } from \"../utils/snakeCase.js\";\n\nclass Layer {\n  /**\n   * Layer\n   * @constructor Layer\n   * @param {Object} options - layer parameters\n   */\n  constructor(options) {\n    this.options = {};\n\n    if (options != null) {\n      [\"resourceType\", \"type\", \"publicId\", \"format\"].forEach(key => {\n        var ref; // @ts-ignore\n\n        return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n      });\n    }\n  }\n\n  resourceType(value) {\n    this.options.resourceType = value;\n    return this;\n  }\n\n  type(value) {\n    this.options.type = value;\n    return this;\n  }\n\n  publicId(value) {\n    this.options.publicId = value;\n    return this;\n  }\n  /**\n   * Get the public ID, formatted for layer parameter\n   * @function Layer#getPublicId\n   * @return {String} public ID\n   */\n\n\n  getPublicId() {\n    var ref;\n    return (ref = this.options.publicId) != null ? ref.replace(/\\//g, \":\") : void 0;\n  }\n  /**\n   * Get the public ID, with format if present\n   * @function Layer#getFullPublicId\n   * @return {String} public ID\n   */\n\n\n  getFullPublicId() {\n    if (this.options.format != null) {\n      return this.getPublicId() + \".\" + this.options.format;\n    } else {\n      return this.getPublicId();\n    }\n  }\n\n  format(value) {\n    this.options.format = value;\n    return this;\n  }\n  /**\n   * generate the string representation of the layer\n   * @function Layer#toString\n   */\n\n\n  toString() {\n    let components = [];\n\n    if (this.options.publicId == null) {\n      throw \"Must supply publicId\";\n    }\n\n    if (!(this.options.resourceType === \"image\")) {\n      components.push(this.options.resourceType);\n    }\n\n    if (!(this.options.type === \"upload\")) {\n      components.push(this.options.type);\n    }\n\n    components.push(this.getFullPublicId());\n    return components.filter(x => !!x).join(\":\");\n  }\n\n  clone() {\n    return new Layer(this.options);\n  }\n\n}\n\nexport default Layer;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/backwards/legacyLayer/layer.js"],"names":["snakeCase","Layer","constructor","options","forEach","key","ref","resourceType","value","type","publicId","getPublicId","replace","getFullPublicId","format","toString","components","push","filter","x","join","clone"],"mappings":"AAAA,SAASA,SAAT,QAA0B,uBAA1B;;AACA,MAAMC,KAAN,CAAY;AACR;AACJ;AACA;AACA;AACA;AACIC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,SAAKA,OAAL,GAAe,EAAf;;AACA,QAAIA,OAAO,IAAI,IAAf,EAAqB;AACjB,OAAC,cAAD,EAAiB,MAAjB,EAAyB,UAAzB,EAAqC,QAArC,EAA+CC,OAA/C,CAAwDC,GAAD,IAAS;AAC5D,YAAIC,GAAJ,CAD4D,CAE5D;;AACA,eAAO,KAAKH,OAAL,CAAaE,GAAb,IAAoB,CAACC,GAAG,GAAGH,OAAO,CAACE,GAAD,CAAd,KAAwB,IAAxB,GAA+BC,GAA/B,GAAqCH,OAAO,CAACH,SAAS,CAACK,GAAD,CAAV,CAAvE;AACH,OAJD;AAKH;AACJ;;AACDE,EAAAA,YAAY,CAACC,KAAD,EAAQ;AAChB,SAAKL,OAAL,CAAaI,YAAb,GAA4BC,KAA5B;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,IAAI,CAACD,KAAD,EAAQ;AACR,SAAKL,OAAL,CAAaM,IAAb,GAAoBD,KAApB;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,QAAQ,CAACF,KAAD,EAAQ;AACZ,SAAKL,OAAL,CAAaO,QAAb,GAAwBF,KAAxB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIG,EAAAA,WAAW,GAAG;AACV,QAAIL,GAAJ;AACA,WAAO,CAACA,GAAG,GAAG,KAAKH,OAAL,CAAaO,QAApB,KAAiC,IAAjC,GAAwCJ,GAAG,CAACM,OAAJ,CAAY,KAAZ,EAAmB,GAAnB,CAAxC,GAAkE,KAAK,CAA9E;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKV,OAAL,CAAaW,MAAb,IAAuB,IAA3B,EAAiC;AAC7B,aAAO,KAAKH,WAAL,KAAqB,GAArB,GAA2B,KAAKR,OAAL,CAAaW,MAA/C;AACH,KAFD,MAGK;AACD,aAAO,KAAKH,WAAL,EAAP;AACH;AACJ;;AACDG,EAAAA,MAAM,CAACN,KAAD,EAAQ;AACV,SAAKL,OAAL,CAAaW,MAAb,GAAsBN,KAAtB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIO,EAAAA,QAAQ,GAAG;AACP,QAAIC,UAAU,GAAG,EAAjB;;AACA,QAAI,KAAKb,OAAL,CAAaO,QAAb,IAAyB,IAA7B,EAAmC;AAC/B,YAAM,sBAAN;AACH;;AACD,QAAI,EAAE,KAAKP,OAAL,CAAaI,YAAb,KAA8B,OAAhC,CAAJ,EAA8C;AAC1CS,MAAAA,UAAU,CAACC,IAAX,CAAgB,KAAKd,OAAL,CAAaI,YAA7B;AACH;;AACD,QAAI,EAAE,KAAKJ,OAAL,CAAaM,IAAb,KAAsB,QAAxB,CAAJ,EAAuC;AACnCO,MAAAA,UAAU,CAACC,IAAX,CAAgB,KAAKd,OAAL,CAAaM,IAA7B;AACH;;AACDO,IAAAA,UAAU,CAACC,IAAX,CAAgB,KAAKJ,eAAL,EAAhB;AACA,WAAOG,UAAU,CAACE,MAAX,CAAkBC,CAAC,IAAI,CAAC,CAACA,CAAzB,EAA4BC,IAA5B,CAAiC,GAAjC,CAAP;AACH;;AACDC,EAAAA,KAAK,GAAG;AACJ,WAAO,IAAIpB,KAAJ,CAAU,KAAKE,OAAf,CAAP;AACH;;AA1EO;;AA4EZ,eAAeF,KAAf","sourcesContent":["import { snakeCase } from \"../utils/snakeCase.js\";\nclass Layer {\n    /**\n     * Layer\n     * @constructor Layer\n     * @param {Object} options - layer parameters\n     */\n    constructor(options) {\n        this.options = {};\n        if (options != null) {\n            [\"resourceType\", \"type\", \"publicId\", \"format\"].forEach((key) => {\n                var ref;\n                // @ts-ignore\n                return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n            });\n        }\n    }\n    resourceType(value) {\n        this.options.resourceType = value;\n        return this;\n    }\n    type(value) {\n        this.options.type = value;\n        return this;\n    }\n    publicId(value) {\n        this.options.publicId = value;\n        return this;\n    }\n    /**\n     * Get the public ID, formatted for layer parameter\n     * @function Layer#getPublicId\n     * @return {String} public ID\n     */\n    getPublicId() {\n        var ref;\n        return (ref = this.options.publicId) != null ? ref.replace(/\\//g, \":\") : void 0;\n    }\n    /**\n     * Get the public ID, with format if present\n     * @function Layer#getFullPublicId\n     * @return {String} public ID\n     */\n    getFullPublicId() {\n        if (this.options.format != null) {\n            return this.getPublicId() + \".\" + this.options.format;\n        }\n        else {\n            return this.getPublicId();\n        }\n    }\n    format(value) {\n        this.options.format = value;\n        return this;\n    }\n    /**\n     * generate the string representation of the layer\n     * @function Layer#toString\n     */\n    toString() {\n        let components = [];\n        if (this.options.publicId == null) {\n            throw \"Must supply publicId\";\n        }\n        if (!(this.options.resourceType === \"image\")) {\n            components.push(this.options.resourceType);\n        }\n        if (!(this.options.type === \"upload\")) {\n            components.push(this.options.type);\n        }\n        components.push(this.getFullPublicId());\n        return components.filter(x => !!x).join(\":\");\n    }\n    clone() {\n        return new Layer(this.options);\n    }\n}\nexport default Layer;\n"]},"metadata":{},"sourceType":"module"}