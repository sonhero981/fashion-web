{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description  Defines the video bitrate in bits per second.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control|Bitrate control}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n\nclass BitRateAction extends Action {\n  constructor(bitRate) {\n    super();\n    this.isConstant = false;\n    this._actionModel = {\n      actionType: 'bitRate'\n    };\n    this.bitRate = bitRate;\n    this._actionModel.bitRate = bitRate;\n  }\n  /**\n   * @description video plays with a constant bitrate (CBR).\n   */\n\n\n  constant() {\n    this.isConstant = true;\n    this._actionModel.constant = true;\n    return this;\n  }\n\n  prepareQualifiers() {\n    let qualifierValue;\n\n    if (this.isConstant) {\n      qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\n    } else {\n      qualifierValue = new QualifierValue(this.bitRate);\n    }\n\n    this.addQualifier(new Qualifier('br', qualifierValue));\n    return this;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      bitRate,\n      constant\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(bitRate);\n    constant && result.constant();\n    return result;\n  }\n\n}\n\nexport default BitRateAction;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/transcode/BitRateAction.js"],"names":["Action","Qualifier","QualifierValue","BitRateAction","constructor","bitRate","isConstant","_actionModel","actionType","constant","prepareQualifiers","qualifierValue","setDelimiter","addQualifier","fromJson","actionModel","result"],"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA,SAASC,cAAT,QAA+B,4CAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BH,MAA5B,CAAmC;AAC/BI,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB;AACA,SAAKC,UAAL,GAAkB,KAAlB;AACA,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAApB;AACA,SAAKH,OAAL,GAAeA,OAAf;AACA,SAAKE,YAAL,CAAkBF,OAAlB,GAA4BA,OAA5B;AACH;AACD;AACJ;AACA;;;AACII,EAAAA,QAAQ,GAAG;AACP,SAAKH,UAAL,GAAkB,IAAlB;AACA,SAAKC,YAAL,CAAkBE,QAAlB,GAA6B,IAA7B;AACA,WAAO,IAAP;AACH;;AACDC,EAAAA,iBAAiB,GAAG;AAChB,QAAIC,cAAJ;;AACA,QAAI,KAAKL,UAAT,EAAqB;AACjBK,MAAAA,cAAc,GAAG,IAAIT,cAAJ,CAAmB,CAAC,KAAKG,OAAN,EAAe,UAAf,CAAnB,EAA+CO,YAA/C,CAA4D,GAA5D,CAAjB;AACH,KAFD,MAGK;AACDD,MAAAA,cAAc,GAAG,IAAIT,cAAJ,CAAmB,KAAKG,OAAxB,CAAjB;AACH;;AACD,SAAKQ,YAAL,CAAkB,IAAIZ,SAAJ,CAAc,IAAd,EAAoBU,cAApB,CAAlB;AACA,WAAO,IAAP;AACH;;AACc,SAARG,QAAQ,CAACC,WAAD,EAAc;AACzB,UAAM;AAAEV,MAAAA,OAAF;AAAWI,MAAAA;AAAX,QAAwBM,WAA9B,CADyB,CAEzB;AACA;;AACA,UAAMC,MAAM,GAAG,IAAI,IAAJ,CAASX,OAAT,CAAf;AACAI,IAAAA,QAAQ,IAAIO,MAAM,CAACP,QAAP,EAAZ;AACA,WAAOO,MAAP;AACH;;AAlC8B;;AAoCnC,eAAeb,aAAf","sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @extends SDK.Action\n * @memberOf Actions.Transcode\n * @description  Defines the video bitrate in bits per second.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#bitrate_control|Bitrate control}\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\nclass BitRateAction extends Action {\n    constructor(bitRate) {\n        super();\n        this.isConstant = false;\n        this._actionModel = { actionType: 'bitRate' };\n        this.bitRate = bitRate;\n        this._actionModel.bitRate = bitRate;\n    }\n    /**\n     * @description video plays with a constant bitrate (CBR).\n     */\n    constant() {\n        this.isConstant = true;\n        this._actionModel.constant = true;\n        return this;\n    }\n    prepareQualifiers() {\n        let qualifierValue;\n        if (this.isConstant) {\n            qualifierValue = new QualifierValue([this.bitRate, 'constant']).setDelimiter(':');\n        }\n        else {\n            qualifierValue = new QualifierValue(this.bitRate);\n        }\n        this.addQualifier(new Qualifier('br', qualifierValue));\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { bitRate, constant } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(bitRate);\n        constant && result.constant();\n        return result;\n    }\n}\nexport default BitRateAction;\n"]},"metadata":{},"sourceType":"module"}