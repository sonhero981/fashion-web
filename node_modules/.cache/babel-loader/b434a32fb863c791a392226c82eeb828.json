{"ast":null,"code":"import { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { isObject } from \"./utils/isObject.js\";\n/**\n * Class for defining account configuration options.\n * Depends on 'utils'\n */\n\n/**\n * Assign values from sources if they are not defined in the destination.\n * Once a value is set it does not change\n * @function Util.defaults\n * @param {Object} destination - the object to assign defaults to\n * @param sources\n * @param {...Object} source - the source object(s) to assign defaults from\n * @return {Object} destination after it was modified\n */\n\nconst useDefaultValues = function (destination) {\n  for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    sources[_key - 1] = arguments[_key];\n  }\n\n  return sources.reduce(function (dest, source) {\n    let key, value;\n\n    for (key in source) {\n      // @ts-ignore\n      value = source[key]; // @ts-ignore\n\n      if (dest[key] === void 0) {\n        // @ts-ignore\n        dest[key] = value;\n      }\n    }\n\n    return dest;\n  }, destination);\n};\n/**\n * Class for defining account configuration options.\n * @constructor Configuration\n * @param {Object} options - The account configuration parameters to set.\n * @see <a href=\"https://cloudinary.com/documentation/solution_overview#configuration_parameters\"\n *  target=\"_new\">Available configuration options</a>\n */\n\n\nclass Configuration {\n  constructor(options) {\n    this.configuration = options == null ? {} : cloneDeep(options);\n    useDefaultValues(this.configuration, DEFAULT_CONFIGURATION_PARAMS);\n  }\n  /**\n   * Initializes the configuration. This method is a convenience method that invokes both\n   *  {@link Configuration#fromEnvironment|fromEnvironment()} (Node.js environment only)\n   *  and {@link Configuration#fromDocument|fromDocument()}.\n   *  It first tries to retrieve the configuration from the environment variable.\n   *  If not available, it tries from the document meta tags.\n   * @function Configuration#init\n   * @return {Configuration} returns `this` for chaining\n   * @see fromDocument\n   * @see fromEnvironment\n   */\n\n\n  init() {\n    this.fromEnvironment();\n    this.fromDocument();\n    return this;\n  }\n  /**\n   * Set a new configuration item\n   * @function Configuration#set\n   * @param {string} name - the name of the item to set\n   * @param {*} value - the value to be set\n   * @return {Configuration}\n   *\n   */\n\n\n  set(name, value) {\n    // @ts-ignore\n    this.configuration[name] = value;\n    return this;\n  }\n  /**\n   * Get the value of a configuration item\n   * @function Configuration#get\n   * @param {string} name - the name of the item to set\n   * @return {*} the configuration item\n   */\n\n\n  get(name) {\n    return this.configuration[name];\n  }\n\n  merge(config) {\n    Object.assign(this.configuration, cloneDeep(config));\n    return this;\n  }\n  /**\n   * Initialize Cloudinary from HTML meta tags.\n   * @function Configuration#fromDocument\n   * @return {Configuration}\n   * @example <meta name=\"cloudinary_cloud_name\" content=\"mycloud\">\n   *\n   */\n\n\n  fromDocument() {\n    var el, i, len, meta_elements;\n    meta_elements = typeof document !== \"undefined\" && document !== null ? document.querySelectorAll('meta[name^=\"cloudinary_\"]') : void 0;\n\n    if (meta_elements) {\n      for (i = 0, len = meta_elements.length; i < len; i++) {\n        el = meta_elements[i];\n        this.configuration[el.getAttribute('name').replace('cloudinary_', '')] = el.getAttribute('content');\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.\n   *\n   * This function will only run under Node.js environment.\n   * @function Configuration#fromEnvironment\n   * @requires Node.js\n   */\n\n\n  fromEnvironment() {\n    var cloudinary_url, query, uri, uriRegex;\n\n    if (typeof process !== \"undefined\" && process !== null && process.env && process.env.CLOUDINARY_URL) {\n      cloudinary_url = process.env.CLOUDINARY_URL;\n      uriRegex = /cloudinary:\\/\\/(?:(\\w+)(?:\\:([\\w-]+))?@)?([\\w\\.-]+)(?:\\/([^?]*))?(?:\\?(.+))?/;\n      uri = uriRegex.exec(cloudinary_url);\n\n      if (uri) {\n        if (uri[3] != null) {\n          this.configuration['cloud_name'] = uri[3];\n        }\n\n        if (uri[1] != null) {\n          this.configuration['api_key'] = uri[1];\n        }\n\n        if (uri[2] != null) {\n          this.configuration['api_secret'] = uri[2];\n        }\n\n        if (uri[4] != null) {\n          this.configuration['private_cdn'] = uri[4] != null;\n        }\n\n        if (uri[4] != null) {\n          this.configuration['secure_distribution'] = uri[4];\n        }\n\n        query = uri[5];\n\n        if (query != null) {\n          query.split('&').forEach(value => {\n            let [k, v] = value.split('=');\n\n            if (v == null) {\n              // @ts-ignore\n              v = true;\n            }\n\n            this.configuration[k] = v;\n          });\n        }\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Create or modify the Cloudinary client configuration\n   *\n   * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.\n   *\n   * This is a backward compatibility method. For new code, use get(), merge() etc.\n   * @function Configuration#config\n   * @param {hash|string|boolean} new_config\n   * @param {string} new_value\n   * @returns {*} configuration, or value\n   *\n   * @see {@link fromEnvironment} for initialization using environment variables\n   * @see {@link fromDocument} for initialization using HTML meta tags\n   */\n\n\n  config(new_config, new_value) {\n    switch (false) {\n      case new_value === void 0:\n        this.set(new_config, new_value);\n        return this.configuration;\n\n      case typeof new_config != 'string':\n        return this.get(new_config);\n\n      case !isObject(new_config):\n        this.merge(new_config);\n        return this.configuration;\n\n      default:\n        // Backward compatibility - return the internal object\n        return this.configuration;\n    }\n  }\n  /**\n   * Returns a copy of the configuration parameters\n   * @function Configuration#toOptions\n   * @returns {Object} a key:value collection of the configuration parameters\n   */\n\n\n  toOptions() {\n    return cloneDeep(this.configuration);\n  }\n\n}\n\nconst DEFAULT_CONFIGURATION_PARAMS = {\n  responsive_class: 'cld-responsive',\n  responsive_use_breakpoints: true,\n  round_dpr: true,\n  secure: (typeof window !== \"undefined\" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === 'https:'\n};\nexport const CONFIG_PARAMS = [\"api_key\", \"api_secret\", \"callback\", \"cdn_subdomain\", \"cloud_name\", \"cname\", \"private_cdn\", \"protocol\", \"resource_type\", \"responsive\", \"responsive_class\", \"responsive_use_breakpoints\", \"responsive_width\", \"round_dpr\", \"secure\", \"secure_cdn_subdomain\", \"secure_distribution\", \"shorten\", \"type\", \"upload_preset\", \"url_suffix\", \"use_root_path\", \"version\", \"externalLibraries\", \"max_timeout_ms\"];\nexport default Configuration;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/backwards/configuration.js"],"names":["cloneDeep","isObject","useDefaultValues","destination","sources","reduce","dest","source","key","value","Configuration","constructor","options","configuration","DEFAULT_CONFIGURATION_PARAMS","init","fromEnvironment","fromDocument","set","name","get","merge","config","Object","assign","el","i","len","meta_elements","document","querySelectorAll","length","getAttribute","replace","cloudinary_url","query","uri","uriRegex","process","env","CLOUDINARY_URL","exec","split","forEach","k","v","new_config","new_value","toOptions","responsive_class","responsive_use_breakpoints","round_dpr","secure","window","location","protocol","CONFIG_PARAMS"],"mappings":"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","sourcesContent":["import { cloneDeep } from '../internal/utils/cloneDeep.js';\nimport { isObject } from \"./utils/isObject.js\";\n/**\n * Class for defining account configuration options.\n * Depends on 'utils'\n */\n/**\n * Assign values from sources if they are not defined in the destination.\n * Once a value is set it does not change\n * @function Util.defaults\n * @param {Object} destination - the object to assign defaults to\n * @param sources\n * @param {...Object} source - the source object(s) to assign defaults from\n * @return {Object} destination after it was modified\n */\nconst useDefaultValues = (destination, ...sources) => {\n    return sources.reduce(function (dest, source) {\n        let key, value;\n        for (key in source) {\n            // @ts-ignore\n            value = source[key];\n            // @ts-ignore\n            if (dest[key] === void 0) {\n                // @ts-ignore\n                dest[key] = value;\n            }\n        }\n        return dest;\n    }, destination);\n};\n/**\n * Class for defining account configuration options.\n * @constructor Configuration\n * @param {Object} options - The account configuration parameters to set.\n * @see <a href=\"https://cloudinary.com/documentation/solution_overview#configuration_parameters\"\n *  target=\"_new\">Available configuration options</a>\n */\nclass Configuration {\n    constructor(options) {\n        this.configuration = options == null ? {} : cloneDeep(options);\n        useDefaultValues(this.configuration, DEFAULT_CONFIGURATION_PARAMS);\n    }\n    /**\n     * Initializes the configuration. This method is a convenience method that invokes both\n     *  {@link Configuration#fromEnvironment|fromEnvironment()} (Node.js environment only)\n     *  and {@link Configuration#fromDocument|fromDocument()}.\n     *  It first tries to retrieve the configuration from the environment variable.\n     *  If not available, it tries from the document meta tags.\n     * @function Configuration#init\n     * @return {Configuration} returns `this` for chaining\n     * @see fromDocument\n     * @see fromEnvironment\n     */\n    init() {\n        this.fromEnvironment();\n        this.fromDocument();\n        return this;\n    }\n    /**\n     * Set a new configuration item\n     * @function Configuration#set\n     * @param {string} name - the name of the item to set\n     * @param {*} value - the value to be set\n     * @return {Configuration}\n     *\n     */\n    set(name, value) {\n        // @ts-ignore\n        this.configuration[name] = value;\n        return this;\n    }\n    /**\n     * Get the value of a configuration item\n     * @function Configuration#get\n     * @param {string} name - the name of the item to set\n     * @return {*} the configuration item\n     */\n    get(name) {\n        return this.configuration[name];\n    }\n    merge(config) {\n        Object.assign(this.configuration, cloneDeep(config));\n        return this;\n    }\n    /**\n     * Initialize Cloudinary from HTML meta tags.\n     * @function Configuration#fromDocument\n     * @return {Configuration}\n     * @example <meta name=\"cloudinary_cloud_name\" content=\"mycloud\">\n     *\n     */\n    fromDocument() {\n        var el, i, len, meta_elements;\n        meta_elements = typeof document !== \"undefined\" && document !== null ? document.querySelectorAll('meta[name^=\"cloudinary_\"]') : void 0;\n        if (meta_elements) {\n            for (i = 0, len = meta_elements.length; i < len; i++) {\n                el = meta_elements[i];\n                this.configuration[el.getAttribute('name').replace('cloudinary_', '')] = el.getAttribute('content');\n            }\n        }\n        return this;\n    }\n    /**\n     * Initialize Cloudinary from the `CLOUDINARY_URL` environment variable.\n     *\n     * This function will only run under Node.js environment.\n     * @function Configuration#fromEnvironment\n     * @requires Node.js\n     */\n    fromEnvironment() {\n        var cloudinary_url, query, uri, uriRegex;\n        if (typeof process !== \"undefined\" && process !== null && process.env && process.env.CLOUDINARY_URL) {\n            cloudinary_url = process.env.CLOUDINARY_URL;\n            uriRegex = /cloudinary:\\/\\/(?:(\\w+)(?:\\:([\\w-]+))?@)?([\\w\\.-]+)(?:\\/([^?]*))?(?:\\?(.+))?/;\n            uri = uriRegex.exec(cloudinary_url);\n            if (uri) {\n                if (uri[3] != null) {\n                    this.configuration['cloud_name'] = uri[3];\n                }\n                if (uri[1] != null) {\n                    this.configuration['api_key'] = uri[1];\n                }\n                if (uri[2] != null) {\n                    this.configuration['api_secret'] = uri[2];\n                }\n                if (uri[4] != null) {\n                    this.configuration['private_cdn'] = uri[4] != null;\n                }\n                if (uri[4] != null) {\n                    this.configuration['secure_distribution'] = uri[4];\n                }\n                query = uri[5];\n                if (query != null) {\n                    query.split('&').forEach(value => {\n                        let [k, v] = value.split('=');\n                        if (v == null) {\n                            // @ts-ignore\n                            v = true;\n                        }\n                        this.configuration[k] = v;\n                    });\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Create or modify the Cloudinary client configuration\n     *\n     * Warning: `config()` returns the actual internal configuration object. modifying it will change the configuration.\n     *\n     * This is a backward compatibility method. For new code, use get(), merge() etc.\n     * @function Configuration#config\n     * @param {hash|string|boolean} new_config\n     * @param {string} new_value\n     * @returns {*} configuration, or value\n     *\n     * @see {@link fromEnvironment} for initialization using environment variables\n     * @see {@link fromDocument} for initialization using HTML meta tags\n     */\n    config(new_config, new_value) {\n        switch (false) {\n            case new_value === void 0:\n                this.set(new_config, new_value);\n                return this.configuration;\n            case typeof new_config != 'string':\n                return this.get(new_config);\n            case !isObject(new_config):\n                this.merge(new_config);\n                return this.configuration;\n            default:\n                // Backward compatibility - return the internal object\n                return this.configuration;\n        }\n    }\n    /**\n     * Returns a copy of the configuration parameters\n     * @function Configuration#toOptions\n     * @returns {Object} a key:value collection of the configuration parameters\n     */\n    toOptions() {\n        return cloneDeep(this.configuration);\n    }\n}\nconst DEFAULT_CONFIGURATION_PARAMS = {\n    responsive_class: 'cld-responsive',\n    responsive_use_breakpoints: true,\n    round_dpr: true,\n    secure: (typeof window !== \"undefined\" && window !== null ? window.location ? window.location.protocol : void 0 : void 0) === 'https:'\n};\nexport const CONFIG_PARAMS = [\n    \"api_key\",\n    \"api_secret\",\n    \"callback\",\n    \"cdn_subdomain\",\n    \"cloud_name\",\n    \"cname\",\n    \"private_cdn\",\n    \"protocol\",\n    \"resource_type\",\n    \"responsive\",\n    \"responsive_class\",\n    \"responsive_use_breakpoints\",\n    \"responsive_width\",\n    \"round_dpr\",\n    \"secure\",\n    \"secure_cdn_subdomain\",\n    \"secure_distribution\",\n    \"shorten\",\n    \"type\",\n    \"upload_preset\",\n    \"url_suffix\",\n    \"use_root_path\",\n    \"version\",\n    \"externalLibraries\",\n    \"max_timeout_ms\"\n];\nexport default Configuration;\n"]},"metadata":{},"sourceType":"module"}