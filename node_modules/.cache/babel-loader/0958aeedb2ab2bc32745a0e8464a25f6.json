{"ast":null,"code":"import { LEGACY_PREDEFINED_VARS, LEGACY_CONDITIONAL_OPERATORS } from \"../consts.js\";\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\n\nexport function legacyNormalizeExpression(expression) {\n  if (typeof expression !== 'string' || expression.length === 0 || expression.match(/^!.+!$/)) {\n    if (expression) {\n      return expression.toString();\n    } else {\n      return expression;\n    }\n  }\n\n  expression = String(expression);\n  const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\+|\\\\*|\\\\^\"; // operators\n\n  const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n  const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n  expression = expression.replace(operatorsReplaceRE, match => {\n    return LEGACY_CONDITIONAL_OPERATORS[match];\n  }); // predefined variables\n\n  const predefinedVarsPattern = \"(\" + Object.keys(LEGACY_PREDEFINED_VARS).join(\"|\") + \")\";\n  const userVariablePattern = '(\\\\$_*[^_ ]+)';\n  const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\"); // @ts-ignore\n\n  expression = expression.replace(variablesReplaceRE, match => LEGACY_PREDEFINED_VARS[match] || match);\n  return expression.replace(/[ _]+/g, '_');\n}","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/backwards/utils/legacyNormalizeExpression.js"],"names":["LEGACY_PREDEFINED_VARS","LEGACY_CONDITIONAL_OPERATORS","legacyNormalizeExpression","expression","length","match","toString","String","operators","operatorsPattern","operatorsReplaceRE","RegExp","replace","predefinedVarsPattern","Object","keys","join","userVariablePattern","variablesReplaceRE"],"mappings":"AAAA,SAASA,sBAAT,EAAiCC,4BAAjC,QAAqE,cAArE;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,yBAAT,CAAmCC,UAAnC,EAA+C;AAClD,MAAI,OAAOA,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,CAACC,MAAX,KAAsB,CAAxD,IAA6DD,UAAU,CAACE,KAAX,CAAiB,QAAjB,CAAjE,EAA6F;AACzF,QAAIF,UAAJ,EAAgB;AACZ,aAAOA,UAAU,CAACG,QAAX,EAAP;AACH,KAFD,MAGK;AACD,aAAOH,UAAP;AACH;AACJ;;AACDA,EAAAA,UAAU,GAAGI,MAAM,CAACJ,UAAD,CAAnB;AACA,QAAMK,SAAS,GAAG,0CAAlB,CAVkD,CAWlD;;AACA,QAAMC,gBAAgB,GAAG,OAAOD,SAAP,GAAmB,YAA5C;AACA,QAAME,kBAAkB,GAAG,IAAIC,MAAJ,CAAWF,gBAAX,EAA6B,GAA7B,CAA3B;AACAN,EAAAA,UAAU,GAAGA,UAAU,CAACS,OAAX,CAAmBF,kBAAnB,EAAwCL,KAAD,IAAW;AAC3D,WAAOJ,4BAA4B,CAACI,KAAD,CAAnC;AACH,GAFY,CAAb,CAdkD,CAiBlD;;AACA,QAAMQ,qBAAqB,GAAG,MAAMC,MAAM,CAACC,IAAP,CAAYf,sBAAZ,EAAoCgB,IAApC,CAAyC,GAAzC,CAAN,GAAsD,GAApF;AACA,QAAMC,mBAAmB,GAAG,eAA5B;AACA,QAAMC,kBAAkB,GAAG,IAAIP,MAAJ,CAAY,GAAEM,mBAAoB,IAAGJ,qBAAsB,EAA3D,EAA8D,GAA9D,CAA3B,CApBkD,CAqBlD;;AACAV,EAAAA,UAAU,GAAGA,UAAU,CAACS,OAAX,CAAmBM,kBAAnB,EAAwCb,KAAD,IAAYL,sBAAsB,CAACK,KAAD,CAAtB,IAAiCA,KAApF,CAAb;AACA,SAAOF,UAAU,CAACS,OAAX,CAAmB,QAAnB,EAA6B,GAA7B,CAAP;AACH","sourcesContent":["import { LEGACY_PREDEFINED_VARS, LEGACY_CONDITIONAL_OPERATORS } from \"../consts.js\";\n/**\n * Normalize an offset value\n * @param {String} expression a decimal value which may have a 'p' or '%' postfix. E.g. '35%', '0.4p'\n * @return {Object|String} a normalized String of the input value if possible otherwise the value itself\n */\nexport function legacyNormalizeExpression(expression) {\n    if (typeof expression !== 'string' || expression.length === 0 || expression.match(/^!.+!$/)) {\n        if (expression) {\n            return expression.toString();\n        }\n        else {\n            return expression;\n        }\n    }\n    expression = String(expression);\n    const operators = \"\\\\|\\\\||>=|<=|&&|!=|>|=|<|/|-|\\\\+|\\\\*|\\\\^\";\n    // operators\n    const operatorsPattern = \"((\" + operators + \")(?=[ _]))\";\n    const operatorsReplaceRE = new RegExp(operatorsPattern, \"g\");\n    expression = expression.replace(operatorsReplaceRE, (match) => {\n        return LEGACY_CONDITIONAL_OPERATORS[match];\n    });\n    // predefined variables\n    const predefinedVarsPattern = \"(\" + Object.keys(LEGACY_PREDEFINED_VARS).join(\"|\") + \")\";\n    const userVariablePattern = '(\\\\$_*[^_ ]+)';\n    const variablesReplaceRE = new RegExp(`${userVariablePattern}|${predefinedVarsPattern}`, \"g\");\n    // @ts-ignore\n    expression = expression.replace(variablesReplaceRE, (match) => (LEGACY_PREDEFINED_VARS[match] || match));\n    return expression.replace(/[ _]+/g, '_');\n}\n"]},"metadata":{},"sourceType":"module"}