{"ast":null,"code":"import { legacyNormalizeExpression } from \"../utils/legacyNormalizeExpression.js\";\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} _radius The radius to parse\n * @return {string} radius transformation string\n */\n\nexport function processRadius(_radius) {\n  let radius = _radius;\n\n  if (!radius) {\n    return radius;\n  }\n\n  if (!Array.isArray(radius)) {\n    radius = [radius];\n  }\n\n  if (radius.length === 0 || radius.length > 4) {\n    throw new Error(\"Radius array should contain between 1 and 4 values\");\n  }\n\n  if (radius.findIndex(x => x === null) >= 0) {\n    throw new Error(\"Corner: Cannot be null\");\n  }\n\n  return radius.map(legacyNormalizeExpression).join(':');\n}","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/backwards/transformationProcessing/processRadius.js"],"names":["legacyNormalizeExpression","processRadius","_radius","radius","Array","isArray","length","Error","findIndex","x","map","join"],"mappings":"AAAA,SAASA,yBAAT,QAA0C,uCAA1C;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AACnC,MAAIC,MAAM,GAAGD,OAAb;;AACA,MAAI,CAACC,MAAL,EAAa;AACT,WAAOA,MAAP;AACH;;AACD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,MAAd,CAAL,EAA4B;AACxBA,IAAAA,MAAM,GAAG,CAACA,MAAD,CAAT;AACH;;AACD,MAAIA,MAAM,CAACG,MAAP,KAAkB,CAAlB,IAAuBH,MAAM,CAACG,MAAP,GAAgB,CAA3C,EAA8C;AAC1C,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACH;;AACD,MAAIJ,MAAM,CAACK,SAAP,CAAkBC,CAAD,IAAOA,CAAC,KAAK,IAA9B,KAAuC,CAA3C,EAA8C;AAC1C,UAAM,IAAIF,KAAJ,CAAU,wBAAV,CAAN;AACH;;AACD,SAAOJ,MAAM,CAACO,GAAP,CAAWV,yBAAX,EAAsCW,IAAtC,CAA2C,GAA3C,CAAP;AACH","sourcesContent":["import { legacyNormalizeExpression } from \"../utils/legacyNormalizeExpression.js\";\n/**\n * Parse radius options\n * @private\n * @param {Array<string|number>|string|number} _radius The radius to parse\n * @return {string} radius transformation string\n */\nexport function processRadius(_radius) {\n    let radius = _radius;\n    if (!radius) {\n        return radius;\n    }\n    if (!Array.isArray(radius)) {\n        radius = [radius];\n    }\n    if (radius.length === 0 || radius.length > 4) {\n        throw new Error(\"Radius array should contain between 1 and 4 values\");\n    }\n    if (radius.findIndex((x) => x === null) >= 0) {\n        throw new Error(\"Corner: Cannot be null\");\n    }\n    return radius.map(legacyNormalizeExpression).join(':');\n}\n"]},"metadata":{},"sourceType":"module"}