{"ast":null,"code":"import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\n/**\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\n\nclass DeliveryFormatAction extends DeliveryAction {\n  constructor(deliveryKey, deliveryType) {\n    super(deliveryKey, deliveryType, 'formatType');\n  }\n  /**\n   * @description Uses lossy compression when delivering animated GIF files.\n   * @return {this}\n   */\n\n\n  lossy() {\n    this._actionModel.lossy = true;\n    this.addFlag(lossy());\n    return this;\n  }\n  /**\n   * @description Uses progressive compression when delivering JPG file format.\n   * @return {this}\n   */\n\n\n  progressive(mode) {\n    if (mode instanceof ProgressiveQualifier) {\n      this._actionModel.progressive = {\n        mode: mode.getFlagValue()\n      };\n      this.addFlag(mode);\n    } else {\n      this._actionModel.progressive = {\n        mode: mode\n      };\n      this.addFlag(progressive(mode));\n    }\n\n    return this;\n  }\n  /**\n   * @description Ensures that images with a transparency channel are delivered in PNG format.\n   */\n\n\n  preserveTransparency() {\n    this._actionModel.preserveTransparency = true;\n    this.addFlag(preserveTransparency());\n    return this;\n  }\n\n  static fromJson(actionModel) {\n    const {\n      formatType,\n      lossy,\n      progressive,\n      preserveTransparency\n    } = actionModel;\n    let result;\n\n    if (formatType) {\n      result = new this('f', formatType);\n    } else {\n      result = new this('f');\n    }\n\n    if (progressive) {\n      if (progressive.mode) {\n        result.progressive(progressive.mode);\n      } else {\n        result.progressive();\n      }\n    }\n\n    lossy && result.lossy();\n    preserveTransparency && result.preserveTransparency();\n    return result;\n  }\n\n}\n\nexport { DeliveryFormatAction };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/delivery/DeliveryFormatAction.js"],"names":["lossy","preserveTransparency","progressive","DeliveryAction","ProgressiveQualifier","DeliveryFormatAction","constructor","deliveryKey","deliveryType","_actionModel","addFlag","mode","getFlagValue","fromJson","actionModel","formatType","result"],"mappings":"AAAA,SAASA,KAAT,EAAgBC,oBAAhB,EAAsCC,WAAtC,QAAyD,0BAAzD;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,SAASC,oBAAT,QAAqC,iCAArC;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,oBAAN,SAAmCF,cAAnC,CAAkD;AAC9CG,EAAAA,WAAW,CAACC,WAAD,EAAcC,YAAd,EAA4B;AACnC,UAAMD,WAAN,EAAmBC,YAAnB,EAAiC,YAAjC;AACH;AACD;AACJ;AACA;AACA;;;AACIR,EAAAA,KAAK,GAAG;AACJ,SAAKS,YAAL,CAAkBT,KAAlB,GAA0B,IAA1B;AACA,SAAKU,OAAL,CAAaV,KAAK,EAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACIE,EAAAA,WAAW,CAACS,IAAD,EAAO;AACd,QAAIA,IAAI,YAAYP,oBAApB,EAA0C;AACtC,WAAKK,YAAL,CAAkBP,WAAlB,GAAgC;AAAES,QAAAA,IAAI,EAAEA,IAAI,CAACC,YAAL;AAAR,OAAhC;AACA,WAAKF,OAAL,CAAaC,IAAb;AACH,KAHD,MAIK;AACD,WAAKF,YAAL,CAAkBP,WAAlB,GAAgC;AAAES,QAAAA,IAAI,EAAEA;AAAR,OAAhC;AACA,WAAKD,OAAL,CAAaR,WAAW,CAACS,IAAD,CAAxB;AACH;;AACD,WAAO,IAAP;AACH;AACD;AACJ;AACA;;;AACIV,EAAAA,oBAAoB,GAAG;AACnB,SAAKQ,YAAL,CAAkBR,oBAAlB,GAAyC,IAAzC;AACA,SAAKS,OAAL,CAAaT,oBAAoB,EAAjC;AACA,WAAO,IAAP;AACH;;AACc,SAARY,QAAQ,CAACC,WAAD,EAAc;AACzB,UAAM;AAAEC,MAAAA,UAAF;AAAcf,MAAAA,KAAd;AAAqBE,MAAAA,WAArB;AAAkCD,MAAAA;AAAlC,QAA2Da,WAAjE;AACA,QAAIE,MAAJ;;AACA,QAAID,UAAJ,EAAgB;AACZC,MAAAA,MAAM,GAAG,IAAI,IAAJ,CAAS,GAAT,EAAcD,UAAd,CAAT;AACH,KAFD,MAGK;AACDC,MAAAA,MAAM,GAAG,IAAI,IAAJ,CAAS,GAAT,CAAT;AACH;;AACD,QAAId,WAAJ,EAAiB;AACb,UAAIA,WAAW,CAACS,IAAhB,EAAsB;AAClBK,QAAAA,MAAM,CAACd,WAAP,CAAmBA,WAAW,CAACS,IAA/B;AACH,OAFD,MAGK;AACDK,QAAAA,MAAM,CAACd,WAAP;AACH;AACJ;;AACDF,IAAAA,KAAK,IAAIgB,MAAM,CAAChB,KAAP,EAAT;AACAC,IAAAA,oBAAoB,IAAIe,MAAM,CAACf,oBAAP,EAAxB;AACA,WAAOe,MAAP;AACH;;AAxD6C;;AA0DlD,SAASX,oBAAT","sourcesContent":["import { lossy, preserveTransparency, progressive } from \"../../qualifiers/flag.js\";\nimport { DeliveryAction } from \"./DeliveryAction.js\";\nimport { ProgressiveQualifier } from \"../../qualifiers/progressive.js\";\n/**\n * @memberOf Actions.Delivery\n * @extends {Actions.Delivery.DeliveryAction}\n * @see Visit {@link Actions.Delivery|Delivery} for an example\n */\nclass DeliveryFormatAction extends DeliveryAction {\n    constructor(deliveryKey, deliveryType) {\n        super(deliveryKey, deliveryType, 'formatType');\n    }\n    /**\n     * @description Uses lossy compression when delivering animated GIF files.\n     * @return {this}\n     */\n    lossy() {\n        this._actionModel.lossy = true;\n        this.addFlag(lossy());\n        return this;\n    }\n    /**\n     * @description Uses progressive compression when delivering JPG file format.\n     * @return {this}\n     */\n    progressive(mode) {\n        if (mode instanceof ProgressiveQualifier) {\n            this._actionModel.progressive = { mode: mode.getFlagValue() };\n            this.addFlag(mode);\n        }\n        else {\n            this._actionModel.progressive = { mode: mode };\n            this.addFlag(progressive(mode));\n        }\n        return this;\n    }\n    /**\n     * @description Ensures that images with a transparency channel are delivered in PNG format.\n     */\n    preserveTransparency() {\n        this._actionModel.preserveTransparency = true;\n        this.addFlag(preserveTransparency());\n        return this;\n    }\n    static fromJson(actionModel) {\n        const { formatType, lossy, progressive, preserveTransparency } = actionModel;\n        let result;\n        if (formatType) {\n            result = new this('f', formatType);\n        }\n        else {\n            result = new this('f');\n        }\n        if (progressive) {\n            if (progressive.mode) {\n                result.progressive(progressive.mode);\n            }\n            else {\n                result.progressive();\n            }\n        }\n        lossy && result.lossy();\n        preserveTransparency && result.preserveTransparency();\n        return result;\n    }\n}\nexport { DeliveryFormatAction };\n"]},"metadata":{},"sourceType":"module"}