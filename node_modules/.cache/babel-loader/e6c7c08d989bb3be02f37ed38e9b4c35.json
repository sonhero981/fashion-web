{"ast":null,"code":"import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\n\nclass ResizeSimpleAction extends Action {\n  /**\n   * @param {string} cropType\n   * @param {number | string} cropWidth The required width of a transformed asset.\n   * @param {number | string} cropHeight The required height of a transformed asset.\n   */\n  constructor(cropType, cropWidth, cropHeight) {\n    super();\n    this._actionModel = {\n      dimensions: {}\n    };\n    this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n    this.addQualifier(new Qualifier('c', cropType));\n    cropWidth && this.width(cropWidth);\n    cropHeight && this.height(cropHeight);\n  }\n  /**\n   * @description Sets the height of the resize\n   * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n\n\n  height(x) {\n    this._actionModel.dimensions.height = x;\n    return this.addQualifier(new Qualifier('h', x));\n  }\n  /**\n   * @description Sets the width of the resize\n   * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n   */\n\n\n  width(x) {\n    this._actionModel.dimensions.width = x;\n    return this.addQualifier(new Qualifier('w', x));\n  }\n  /**\n   * @description Sets the aspect ratio of the asset.\n   * For a list of supported types see {@link Qualifiers.AspectRatio|\n    * AspectRatio values}\n   * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n   * @return {this}\n   */\n\n\n  aspectRatio(ratio) {\n    // toFloatAsString is used to ensure 1 turns into 1.0\n    if (ratio instanceof AspectRatioQualifierValue) {\n      this._actionModel.dimensions.aspectRatio = `${ratio}`;\n      return this.addQualifier(new Qualifier('ar', ratio));\n    }\n\n    if (typeof ratio === 'number' || typeof ratio === 'string') {\n      this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n      return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n    }\n\n    if (ratio instanceof FlagQualifier) {\n      this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\n      return this.addFlag(ratio);\n    }\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n   * @return {this}\n   */\n\n\n  relative() {\n    this._actionModel.relative = true;\n    return this.addFlag(relative());\n  }\n  /**\n   * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n   * @return {this}\n   */\n\n\n  regionRelative() {\n    this._actionModel.regionRelative = true;\n    return this.addFlag(regionRelative());\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      dimensions,\n      relative,\n      regionRelative\n    } = actionModel;\n    const {\n      aspectRatio,\n      width,\n      height\n    } = dimensions;\n    const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(cropMode, width, height);\n    aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n    relative && result.relative();\n    regionRelative && result.regionRelative();\n    return result;\n  }\n\n}\n\nexport { ResizeSimpleAction };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/resize/ResizeSimpleAction.js"],"names":["Qualifier","Action","toFloatAsString","AspectRatioQualifierValue","ignoreInitialAspectRatio","regionRelative","relative","FlagQualifier","ACTION_TYPE_TO_CROP_MODE_MAP","CROP_MODE_TO_ACTION_TYPE_MAP","ResizeSimpleAction","constructor","cropType","cropWidth","cropHeight","_actionModel","dimensions","actionType","addQualifier","width","height","x","aspectRatio","ratio","qualifierValue","addFlag","fromJson","actionModel","cropMode","result"],"mappings":"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","sourcesContent":["import { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { Action } from \"../../internal/Action.js\";\nimport { toFloatAsString } from \"../../internal/utils/toFloatAsString.js\";\nimport { AspectRatioQualifierValue } from \"../../qualifiers/aspectRatio/AspectRatioQualifierValue.js\";\nimport { ignoreInitialAspectRatio, regionRelative, relative } from \"../../qualifiers/flag.js\";\nimport { FlagQualifier } from \"../../qualifiers/flag/FlagQualifier.js\";\nimport { ACTION_TYPE_TO_CROP_MODE_MAP, CROP_MODE_TO_ACTION_TYPE_MAP } from \"../../internal/internalConstants.js\";\n/**\n * @description Defines a resize using width and height.\n * @extends SDK.Action\n * @memberOf Actions.Resize\n * @see Visit {@link Actions.Resize| Resize} for examples\n */\nclass ResizeSimpleAction extends Action {\n    /**\n     * @param {string} cropType\n     * @param {number | string} cropWidth The required width of a transformed asset.\n     * @param {number | string} cropHeight The required height of a transformed asset.\n     */\n    constructor(cropType, cropWidth, cropHeight) {\n        super();\n        this._actionModel = { dimensions: {} };\n        this._actionModel.actionType = CROP_MODE_TO_ACTION_TYPE_MAP[cropType] || cropType;\n        this.addQualifier(new Qualifier('c', cropType));\n        cropWidth && this.width(cropWidth);\n        cropHeight && this.height(cropHeight);\n    }\n    /**\n     * @description Sets the height of the resize\n     * @param {string | number} x The height in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    height(x) {\n        this._actionModel.dimensions.height = x;\n        return this.addQualifier(new Qualifier('h', x));\n    }\n    /**\n     * @description Sets the width of the resize\n     * @param {string | number} x The width in pixels (if an integer is specified) or as a percentage (if a float is specified).\n     */\n    width(x) {\n        this._actionModel.dimensions.width = x;\n        return this.addQualifier(new Qualifier('w', x));\n    }\n    /**\n     * @description Sets the aspect ratio of the asset.\n     * For a list of supported types see {@link Qualifiers.AspectRatio|\n      * AspectRatio values}\n     * @param {AspectRatioType|number|string} ratio The new aspect ratio, specified as a percentage or ratio.\n     * @return {this}\n     */\n    aspectRatio(ratio) {\n        // toFloatAsString is used to ensure 1 turns into 1.0\n        if (ratio instanceof AspectRatioQualifierValue) {\n            this._actionModel.dimensions.aspectRatio = `${ratio}`;\n            return this.addQualifier(new Qualifier('ar', ratio));\n        }\n        if (typeof ratio === 'number' || typeof ratio === 'string') {\n            this._actionModel.dimensions.aspectRatio = toFloatAsString(ratio);\n            return this.addQualifier(new Qualifier('ar', toFloatAsString(ratio)));\n        }\n        if (ratio instanceof FlagQualifier) {\n            this._actionModel.dimensions.aspectRatio = `${ratio.qualifierValue}`;\n            return this.addFlag(ratio);\n        }\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the containing image instead of the added layer.\n     * @return {this}\n     */\n    relative() {\n        this._actionModel.relative = true;\n        return this.addFlag(relative());\n    }\n    /**\n     * @description Modifies percentage-based width & height parameters of overlays and underlays (e.g., 1.0) to be relative to the overlaid region\n     * @return {this}\n     */\n    regionRelative() {\n        this._actionModel.regionRelative = true;\n        return this.addFlag(regionRelative());\n    }\n    static fromJson(actionModel) {\n        const { actionType, dimensions, relative, regionRelative } = actionModel;\n        const { aspectRatio, width, height } = dimensions;\n        const cropMode = ACTION_TYPE_TO_CROP_MODE_MAP[actionType] || actionType;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(cropMode, width, height);\n        aspectRatio && result.aspectRatio(aspectRatio === 'ignore_aspect_ratio' ? ignoreInitialAspectRatio() : aspectRatio);\n        relative && result.relative();\n        regionRelative && result.regionRelative();\n        return result;\n    }\n}\nexport { ResizeSimpleAction };\n"]},"metadata":{},"sourceType":"module"}