{"ast":null,"code":"/**\n *\n * @private\n * @param {any} a\n */\nfunction isObject(a) {\n  if (typeof a !== 'object' || a instanceof Array) {\n    return false;\n  } else {\n    return true;\n  }\n}\n\nclass Config {\n  filterOutNonSupportedKeys(userProvidedConfig, validKeys) {\n    const obj = Object.create({});\n\n    if (isObject(userProvidedConfig)) {\n      Object.keys(userProvidedConfig).forEach(key => {\n        if (validKeys.indexOf(key) >= 0) {\n          obj[key] = userProvidedConfig[key];\n        } else {\n          console.warn('Warning - unsupported key provided to configuration: ', key);\n        }\n      });\n      return obj;\n    } else {\n      return Object.create({});\n    }\n  }\n\n}\n\nexport default Config;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/config/BaseConfig.js"],"names":["isObject","a","Array","Config","filterOutNonSupportedKeys","userProvidedConfig","validKeys","obj","Object","create","keys","forEach","key","indexOf","console","warn"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,CAAkBC,CAAlB,EAAqB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,YAAYC,KAA1C,EAAiD;AAC7C,WAAO,KAAP;AACH,GAFD,MAGK;AACD,WAAO,IAAP;AACH;AACJ;;AACD,MAAMC,MAAN,CAAa;AACTC,EAAAA,yBAAyB,CAACC,kBAAD,EAAqBC,SAArB,EAAgC;AACrD,UAAMC,GAAG,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAZ;;AACA,QAAIT,QAAQ,CAACK,kBAAD,CAAZ,EAAkC;AAC9BG,MAAAA,MAAM,CAACE,IAAP,CAAYL,kBAAZ,EAAgCM,OAAhC,CAAyCC,GAAD,IAAS;AAC7C,YAAIN,SAAS,CAACO,OAAV,CAAkBD,GAAlB,KAA0B,CAA9B,EAAiC;AAC7BL,UAAAA,GAAG,CAACK,GAAD,CAAH,GAAWP,kBAAkB,CAACO,GAAD,CAA7B;AACH,SAFD,MAGK;AACDE,UAAAA,OAAO,CAACC,IAAR,CAAa,uDAAb,EAAsEH,GAAtE;AACH;AACJ,OAPD;AAQA,aAAOL,GAAP;AACH,KAVD,MAWK;AACD,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,CAAP;AACH;AACJ;;AAjBQ;;AAmBb,eAAeN,MAAf","sourcesContent":["/**\n *\n * @private\n * @param {any} a\n */\nfunction isObject(a) {\n    if (typeof a !== 'object' || a instanceof Array) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\nclass Config {\n    filterOutNonSupportedKeys(userProvidedConfig, validKeys) {\n        const obj = Object.create({});\n        if (isObject(userProvidedConfig)) {\n            Object.keys(userProvidedConfig).forEach((key) => {\n                if (validKeys.indexOf(key) >= 0) {\n                    obj[key] = userProvidedConfig[key];\n                }\n                else {\n                    console.warn('Warning - unsupported key provided to configuration: ', key);\n                }\n            });\n            return obj;\n        }\n        else {\n            return Object.create({});\n        }\n    }\n}\nexport default Config;\n"]},"metadata":{},"sourceType":"module"}