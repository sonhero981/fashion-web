{"ast":null,"code":"import { QualifierModel } from \"../../internal/models/QualifierModel.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {QualifierModel}\n * @description An abstract class extended by all Source objects\n */\n\nclass BaseSource extends QualifierModel {\n  /**\n   * @description Utility function to encode an asset publicID in an overlay\n   * @protected\n   * @example\n   * encodeAssetPublicID('foo/bar'); // -> foo:bar\n   */\n  encodeAssetPublicID(publicID) {\n    return publicID.replace(/\\//g, ':');\n  }\n  /**\n   * @description\n   * Apply a transformation on the image source of the layer\n   * @param {SDK.ImageTransformation} t An image transformation to apply to the layer\n   * @returns {this}\n   */\n\n\n  transformation(t) {\n    this._qualifierModel.transformation = t.toJson();\n    this._transformation = t;\n    return this;\n  }\n  /**\n   * @description Returns the Transformation of the source\n   * @return {SDK.Transformation}\n   */\n\n\n  getTransformation() {\n    return this._transformation;\n  }\n\n}\n\nexport { BaseSource };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/qualifiers/source/BaseSource.js"],"names":["QualifierModel","BaseSource","encodeAssetPublicID","publicID","replace","transformation","t","_qualifierModel","toJson","_transformation","getTransformation"],"mappings":"AAAA,SAASA,cAAT,QAA+B,yCAA/B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,SAAyBD,cAAzB,CAAwC;AACpC;AACJ;AACA;AACA;AACA;AACA;AACIE,EAAAA,mBAAmB,CAACC,QAAD,EAAW;AAC1B,WAAOA,QAAQ,CAACC,OAAT,CAAiB,KAAjB,EAAwB,GAAxB,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACC,CAAD,EAAI;AACd,SAAKC,eAAL,CAAqBF,cAArB,GAAsCC,CAAC,CAACE,MAAF,EAAtC;AACA,SAAKC,eAAL,GAAuBH,CAAvB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;;;AACII,EAAAA,iBAAiB,GAAG;AAChB,WAAO,KAAKD,eAAZ;AACH;;AA3BmC;;AA6BxC,SAASR,UAAT","sourcesContent":["import { QualifierModel } from \"../../internal/models/QualifierModel.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {QualifierModel}\n * @description An abstract class extended by all Source objects\n */\nclass BaseSource extends QualifierModel {\n    /**\n     * @description Utility function to encode an asset publicID in an overlay\n     * @protected\n     * @example\n     * encodeAssetPublicID('foo/bar'); // -> foo:bar\n     */\n    encodeAssetPublicID(publicID) {\n        return publicID.replace(/\\//g, ':');\n    }\n    /**\n     * @description\n     * Apply a transformation on the image source of the layer\n     * @param {SDK.ImageTransformation} t An image transformation to apply to the layer\n     * @returns {this}\n     */\n    transformation(t) {\n        this._qualifierModel.transformation = t.toJson();\n        this._transformation = t;\n        return this;\n    }\n    /**\n     * @description Returns the Transformation of the source\n     * @return {SDK.Transformation}\n     */\n    getTransformation() {\n        return this._transformation;\n    }\n}\nexport { BaseSource };\n"]},"metadata":{},"sourceType":"module"}