{"ast":null,"code":"import Layer from './layer.js';\nimport { snakeCase } from \"../utils/snakeCase.js\";\nimport { isEmpty } from \"../utils/isEmpty.js\";\nimport { smartEscape } from \"../utils/smartEscape.js\";\nimport { isNumberLike } from \"../utils/isNumberLike.js\";\n\nclass TextLayer extends Layer {\n  /**\n   * @constructor TextLayer\n   * @param {Object} options - layer parameters\n   */\n  constructor(options) {\n    let keys;\n    super(options);\n    keys = [\"resourceType\", \"resourceType\", \"fontFamily\", \"fontSize\", \"fontWeight\", \"fontStyle\", \"textDecoration\", \"textAlign\", \"stroke\", \"letterSpacing\", \"lineSpacing\", \"fontHinting\", \"fontAntialiasing\", \"text\"];\n\n    if (options != null) {\n      keys.forEach(key => {\n        var ref; // @ts-ignore\n\n        return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n      });\n    }\n\n    this.options.resourceType = \"text\";\n  } //@ts-ignore\n\n\n  resourceType(resourceType) {\n    throw \"Cannot modify resourceType for text layers\";\n  } //@ts-ignore\n\n\n  type(type) {\n    throw \"Cannot modify type for text layers\";\n  }\n\n  format(format) {\n    throw \"Cannot modify format for text layers\";\n  }\n\n  fontFamily(fontFamily) {\n    this.options.fontFamily = fontFamily;\n    return this;\n  }\n\n  fontSize(fontSize) {\n    this.options.fontSize = fontSize;\n    return this;\n  }\n\n  fontWeight(fontWeight) {\n    this.options.fontWeight = fontWeight;\n    return this;\n  }\n\n  fontStyle(fontStyle) {\n    this.options.fontStyle = fontStyle;\n    return this;\n  }\n\n  textDecoration(textDecoration) {\n    this.options.textDecoration = textDecoration;\n    return this;\n  }\n\n  textAlign(textAlign) {\n    this.options.textAlign = textAlign;\n    return this;\n  }\n\n  stroke(stroke) {\n    this.options.stroke = stroke;\n    return this;\n  }\n\n  letterSpacing(letterSpacing) {\n    this.options.letterSpacing = letterSpacing;\n    return this;\n  }\n\n  lineSpacing(lineSpacing) {\n    this.options.lineSpacing = lineSpacing;\n    return this;\n  }\n\n  fontHinting(fontHinting) {\n    this.options.fontHinting = fontHinting;\n    return this;\n  }\n\n  fontAntialiasing(fontAntialiasing) {\n    this.options.fontAntialiasing = fontAntialiasing;\n    return this;\n  }\n\n  text(text) {\n    this.options.text = text;\n    return this;\n  }\n  /**\n   * generate the string representation of the layer\n   * @function TextLayer#toString\n   * @return {String}\n   */\n\n\n  toString() {\n    var components, hasPublicId, hasStyle, publicId, re, res, start, style, text, textSource;\n    style = this.textStyleIdentifier();\n\n    if (this.options.publicId != null) {\n      publicId = this.getFullPublicId();\n    }\n\n    if (this.options.text != null) {\n      hasPublicId = !isEmpty(publicId);\n      hasStyle = !isEmpty(style);\n\n      if (hasPublicId && hasStyle || !hasPublicId && !hasStyle) {\n        throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay, but not both!\";\n      }\n\n      re = /\\$\\([a-zA-Z]\\w*\\)/g;\n      start = 0; //        textSource = text.replace(new RegExp(\"[,/]\", 'g'), (c)-> \"%#{c.charCodeAt(0).toString(16).toUpperCase()}\")\n\n      textSource = smartEscape(this.options.text, /[,\\/]/g);\n      text = \"\";\n\n      while (res = re.exec(textSource)) {\n        text += smartEscape(textSource.slice(start, res.index));\n        text += res[0];\n        start = res.index + res[0].length;\n      }\n\n      text += smartEscape(textSource.slice(start));\n    }\n\n    components = [this.options.resourceType, style, publicId, text];\n    return components.filter(x => !!x).join(\":\");\n  }\n\n  textStyleIdentifier() {\n    var components;\n    components = [];\n\n    if (this.options.fontWeight !== \"normal\") {\n      components.push(this.options.fontWeight);\n    }\n\n    if (this.options.fontStyle !== \"normal\") {\n      components.push(this.options.fontStyle);\n    }\n\n    if (this.options.textDecoration !== \"none\") {\n      components.push(this.options.textDecoration);\n    }\n\n    components.push(this.options.textAlign);\n\n    if (this.options.stroke !== \"none\") {\n      components.push(this.options.stroke);\n    }\n\n    if (!(isEmpty(this.options.letterSpacing) && !isNumberLike(this.options.letterSpacing))) {\n      components.push(\"letter_spacing_\" + this.options.letterSpacing);\n    }\n\n    if (!(isEmpty(this.options.lineSpacing) && !isNumberLike(this.options.lineSpacing))) {\n      components.push(\"line_spacing_\" + this.options.lineSpacing);\n    }\n\n    if (!isEmpty(this.options.fontAntialiasing)) {\n      components.push(\"antialias_\" + this.options.fontAntialiasing);\n    }\n\n    if (!isEmpty(this.options.fontHinting)) {\n      components.push(\"hinting_\" + this.options.fontHinting);\n    }\n\n    if (!isEmpty(components.filter(x => !!x))) {\n      if (isEmpty(this.options.fontFamily)) {\n        throw `Must supply fontFamily. ${components}`;\n      }\n\n      if (isEmpty(this.options.fontSize) && !isNumberLike(this.options.fontSize)) {\n        throw \"Must supply fontSize.\";\n      }\n    }\n\n    components.unshift(this.options.fontFamily, this.options.fontSize);\n    components = components.filter(x => !!x).join(\"_\");\n    return components;\n  }\n\n}\n\n;\nexport default TextLayer;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/backwards/legacyLayer/textlayer.js"],"names":["Layer","snakeCase","isEmpty","smartEscape","isNumberLike","TextLayer","constructor","options","keys","forEach","key","ref","resourceType","type","format","fontFamily","fontSize","fontWeight","fontStyle","textDecoration","textAlign","stroke","letterSpacing","lineSpacing","fontHinting","fontAntialiasing","text","toString","components","hasPublicId","hasStyle","publicId","re","res","start","style","textSource","textStyleIdentifier","getFullPublicId","exec","slice","index","length","filter","x","join","push","unshift"],"mappings":"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","sourcesContent":["import Layer from './layer.js';\nimport { snakeCase } from \"../utils/snakeCase.js\";\nimport { isEmpty } from \"../utils/isEmpty.js\";\nimport { smartEscape } from \"../utils/smartEscape.js\";\nimport { isNumberLike } from \"../utils/isNumberLike.js\";\nclass TextLayer extends Layer {\n    /**\n     * @constructor TextLayer\n     * @param {Object} options - layer parameters\n     */\n    constructor(options) {\n        let keys;\n        super(options);\n        keys = [\"resourceType\", \"resourceType\", \"fontFamily\", \"fontSize\", \"fontWeight\", \"fontStyle\", \"textDecoration\", \"textAlign\", \"stroke\", \"letterSpacing\", \"lineSpacing\", \"fontHinting\", \"fontAntialiasing\", \"text\"];\n        if (options != null) {\n            keys.forEach((key) => {\n                var ref;\n                // @ts-ignore\n                return this.options[key] = (ref = options[key]) != null ? ref : options[snakeCase(key)];\n            });\n        }\n        this.options.resourceType = \"text\";\n    }\n    //@ts-ignore\n    resourceType(resourceType) {\n        throw \"Cannot modify resourceType for text layers\";\n    }\n    //@ts-ignore\n    type(type) {\n        throw \"Cannot modify type for text layers\";\n    }\n    format(format) {\n        throw \"Cannot modify format for text layers\";\n    }\n    fontFamily(fontFamily) {\n        this.options.fontFamily = fontFamily;\n        return this;\n    }\n    fontSize(fontSize) {\n        this.options.fontSize = fontSize;\n        return this;\n    }\n    fontWeight(fontWeight) {\n        this.options.fontWeight = fontWeight;\n        return this;\n    }\n    fontStyle(fontStyle) {\n        this.options.fontStyle = fontStyle;\n        return this;\n    }\n    textDecoration(textDecoration) {\n        this.options.textDecoration = textDecoration;\n        return this;\n    }\n    textAlign(textAlign) {\n        this.options.textAlign = textAlign;\n        return this;\n    }\n    stroke(stroke) {\n        this.options.stroke = stroke;\n        return this;\n    }\n    letterSpacing(letterSpacing) {\n        this.options.letterSpacing = letterSpacing;\n        return this;\n    }\n    lineSpacing(lineSpacing) {\n        this.options.lineSpacing = lineSpacing;\n        return this;\n    }\n    fontHinting(fontHinting) {\n        this.options.fontHinting = fontHinting;\n        return this;\n    }\n    fontAntialiasing(fontAntialiasing) {\n        this.options.fontAntialiasing = fontAntialiasing;\n        return this;\n    }\n    text(text) {\n        this.options.text = text;\n        return this;\n    }\n    /**\n     * generate the string representation of the layer\n     * @function TextLayer#toString\n     * @return {String}\n     */\n    toString() {\n        var components, hasPublicId, hasStyle, publicId, re, res, start, style, text, textSource;\n        style = this.textStyleIdentifier();\n        if (this.options.publicId != null) {\n            publicId = this.getFullPublicId();\n        }\n        if (this.options.text != null) {\n            hasPublicId = !isEmpty(publicId);\n            hasStyle = !isEmpty(style);\n            if (hasPublicId && hasStyle || !hasPublicId && !hasStyle) {\n                throw \"Must supply either style parameters or a public_id when providing text parameter in a text overlay/underlay, but not both!\";\n            }\n            re = /\\$\\([a-zA-Z]\\w*\\)/g;\n            start = 0;\n            //        textSource = text.replace(new RegExp(\"[,/]\", 'g'), (c)-> \"%#{c.charCodeAt(0).toString(16).toUpperCase()}\")\n            textSource = smartEscape(this.options.text, /[,\\/]/g);\n            text = \"\";\n            while (res = re.exec(textSource)) {\n                text += smartEscape(textSource.slice(start, res.index));\n                text += res[0];\n                start = res.index + res[0].length;\n            }\n            text += smartEscape(textSource.slice(start));\n        }\n        components = [this.options.resourceType, style, publicId, text];\n        return (components).filter(x => !!x).join(\":\");\n    }\n    textStyleIdentifier() {\n        var components;\n        components = [];\n        if (this.options.fontWeight !== \"normal\") {\n            components.push(this.options.fontWeight);\n        }\n        if (this.options.fontStyle !== \"normal\") {\n            components.push(this.options.fontStyle);\n        }\n        if (this.options.textDecoration !== \"none\") {\n            components.push(this.options.textDecoration);\n        }\n        components.push(this.options.textAlign);\n        if (this.options.stroke !== \"none\") {\n            components.push(this.options.stroke);\n        }\n        if (!(isEmpty(this.options.letterSpacing) && !isNumberLike(this.options.letterSpacing))) {\n            components.push(\"letter_spacing_\" + this.options.letterSpacing);\n        }\n        if (!(isEmpty(this.options.lineSpacing) && !isNumberLike(this.options.lineSpacing))) {\n            components.push(\"line_spacing_\" + this.options.lineSpacing);\n        }\n        if (!(isEmpty(this.options.fontAntialiasing))) {\n            components.push(\"antialias_\" + this.options.fontAntialiasing);\n        }\n        if (!(isEmpty(this.options.fontHinting))) {\n            components.push(\"hinting_\" + this.options.fontHinting);\n        }\n        if (!isEmpty(components.filter(x => !!x))) {\n            if (isEmpty(this.options.fontFamily)) {\n                throw `Must supply fontFamily. ${components}`;\n            }\n            if (isEmpty(this.options.fontSize) && !isNumberLike(this.options.fontSize)) {\n                throw \"Must supply fontSize.\";\n            }\n        }\n        components.unshift(this.options.fontFamily, this.options.fontSize);\n        components = components.filter(x => !!x).join(\"_\");\n        return components;\n    }\n}\n;\nexport default TextLayer;\n"]},"metadata":{},"sourceType":"module"}