{"ast":null,"code":"import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Flag\n * @extends {SDK.Qualifier}\n * @description the FlagQualifier class\n */\n\nclass FlagQualifier extends Qualifier {\n  constructor(flagType, flagValue) {\n    let qualifierValue;\n\n    if (flagValue) {\n      qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\n    } else {\n      qualifierValue = flagType;\n    }\n\n    super('fl', qualifierValue);\n    this.flagValue = flagValue;\n  }\n\n  toString() {\n    return super.toString().replace(/\\./, '%2E');\n  }\n\n  getFlagValue() {\n    return this.flagValue;\n  }\n\n}\n\nexport { FlagQualifier };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/qualifiers/flag/FlagQualifier.js"],"names":["QualifierValue","Qualifier","FlagQualifier","constructor","flagType","flagValue","qualifierValue","setDelimiter","toString","replace","getFlagValue"],"mappings":"AAAA,SAASA,cAAT,QAA+B,4CAA/B;AACA,SAASC,SAAT,QAA0B,uCAA1B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4BD,SAA5B,CAAsC;AAClCE,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAC7B,QAAIC,cAAJ;;AACA,QAAID,SAAJ,EAAe;AACXC,MAAAA,cAAc,GAAG,IAAIN,cAAJ,CAAmB,CAACI,QAAD,EAAY,GAAEC,SAAU,EAAxB,CAAnB,EAA+CE,YAA/C,CAA4D,GAA5D,CAAjB;AACH,KAFD,MAGK;AACDD,MAAAA,cAAc,GAAGF,QAAjB;AACH;;AACD,UAAM,IAAN,EAAYE,cAAZ;AACA,SAAKD,SAAL,GAAiBA,SAAjB;AACH;;AACDG,EAAAA,QAAQ,GAAG;AACP,WAAO,MAAMA,QAAN,GAAiBC,OAAjB,CAAyB,IAAzB,EAA+B,KAA/B,CAAP;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,WAAO,KAAKL,SAAZ;AACH;;AAjBiC;;AAmBtC,SAASH,aAAT","sourcesContent":["import { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\n/**\n * @memberOf Qualifiers.Flag\n * @extends {SDK.Qualifier}\n * @description the FlagQualifier class\n */\nclass FlagQualifier extends Qualifier {\n    constructor(flagType, flagValue) {\n        let qualifierValue;\n        if (flagValue) {\n            qualifierValue = new QualifierValue([flagType, `${flagValue}`]).setDelimiter(':');\n        }\n        else {\n            qualifierValue = flagType;\n        }\n        super('fl', qualifierValue);\n        this.flagValue = flagValue;\n    }\n    toString() {\n        return super.toString().replace(/\\./, '%2E');\n    }\n    getFlagValue() {\n        return this.flagValue;\n    }\n}\nexport { FlagQualifier };\n"]},"metadata":{},"sourceType":"module"}