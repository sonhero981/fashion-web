{"ast":null,"code":"/**\n * @private\n * @description Adds left padding to a string with the desired substring the provided number of times\n * @example stringPad(foo, 3, 'a'') // -> aaafoo\n * @param {string} value\n * @param {number} _targetLength\n * @param {string} _padString\n */\nexport function stringPad(value, _targetLength, _padString) {\n  let targetLength = _targetLength >> 0; //truncate if number or convert non-number to 0;\n\n  let padString = String(typeof _padString !== 'undefined' ? _padString : ' ');\n\n  if (value.length > targetLength) {\n    return String(value);\n  } else {\n    targetLength = targetLength - value.length;\n\n    if (targetLength > padString.length) {\n      padString += repeatStringNumTimes(padString, targetLength / padString.length);\n    }\n\n    return padString.slice(0, targetLength) + String(value);\n  }\n}\n/**\n * @description Repeat a string multiple times, cross-browser-safe alternative to string.repeat()\n * @param string\n * @param _times\n */\n\nfunction repeatStringNumTimes(string, _times) {\n  let times = _times;\n  let repeatedString = \"\";\n\n  while (times > 0) {\n    repeatedString += string;\n    times--;\n  }\n\n  return repeatedString;\n}","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/sdkAnalytics/stringPad.js"],"names":["stringPad","value","_targetLength","_padString","targetLength","padString","String","length","repeatStringNumTimes","slice","string","_times","times","repeatedString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA0BC,aAA1B,EAAyCC,UAAzC,EAAqD;AACxD,MAAIC,YAAY,GAAGF,aAAa,IAAI,CAApC,CADwD,CACjB;;AACvC,MAAIG,SAAS,GAAGC,MAAM,CAAE,OAAOH,UAAP,KAAsB,WAAtB,GAAoCA,UAApC,GAAiD,GAAnD,CAAtB;;AACA,MAAIF,KAAK,CAACM,MAAN,GAAeH,YAAnB,EAAiC;AAC7B,WAAOE,MAAM,CAACL,KAAD,CAAb;AACH,GAFD,MAGK;AACDG,IAAAA,YAAY,GAAGA,YAAY,GAAGH,KAAK,CAACM,MAApC;;AACA,QAAIH,YAAY,GAAGC,SAAS,CAACE,MAA7B,EAAqC;AACjCF,MAAAA,SAAS,IAAIG,oBAAoB,CAACH,SAAD,EAAYD,YAAY,GAAGC,SAAS,CAACE,MAArC,CAAjC;AACH;;AACD,WAAOF,SAAS,CAACI,KAAV,CAAgB,CAAhB,EAAmBL,YAAnB,IAAmCE,MAAM,CAACL,KAAD,CAAhD;AACH;AACJ;AACD;AACA;AACA;AACA;AACA;;AACA,SAASO,oBAAT,CAA8BE,MAA9B,EAAsCC,MAAtC,EAA8C;AAC1C,MAAIC,KAAK,GAAGD,MAAZ;AACA,MAAIE,cAAc,GAAG,EAArB;;AACA,SAAOD,KAAK,GAAG,CAAf,EAAkB;AACdC,IAAAA,cAAc,IAAIH,MAAlB;AACAE,IAAAA,KAAK;AACR;;AACD,SAAOC,cAAP;AACH","sourcesContent":["/**\n * @private\n * @description Adds left padding to a string with the desired substring the provided number of times\n * @example stringPad(foo, 3, 'a'') // -> aaafoo\n * @param {string} value\n * @param {number} _targetLength\n * @param {string} _padString\n */\nexport function stringPad(value, _targetLength, _padString) {\n    let targetLength = _targetLength >> 0; //truncate if number or convert non-number to 0;\n    let padString = String((typeof _padString !== 'undefined' ? _padString : ' '));\n    if (value.length > targetLength) {\n        return String(value);\n    }\n    else {\n        targetLength = targetLength - value.length;\n        if (targetLength > padString.length) {\n            padString += repeatStringNumTimes(padString, targetLength / padString.length);\n        }\n        return padString.slice(0, targetLength) + String(value);\n    }\n}\n/**\n * @description Repeat a string multiple times, cross-browser-safe alternative to string.repeat()\n * @param string\n * @param _times\n */\nfunction repeatStringNumTimes(string, _times) {\n    let times = _times;\n    let repeatedString = \"\";\n    while (times > 0) {\n        repeatedString += string;\n        times--;\n    }\n    return repeatedString;\n}\n"]},"metadata":{},"sourceType":"module"}