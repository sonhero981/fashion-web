{"ast":null,"code":"import Expression from './expression.js';\n/**\n * Represents a transformation condition.\n * @param {string} conditionStr - a condition in string format\n * @class Condition\n * @example\n * // normally this class is not instantiated directly\n * var tr = cloudinary.Transformation.new()\n *    .if().width( \">\", 1000).and().aspectRatio(\"<\", \"3:4\").then()\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n * var tr = cloudinary.Transformation.new()\n *    .if(\"w > 1000 and aspectRatio < 3:4\")\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n */\n\nclass Condition extends Expression {\n  constructor(conditionStr) {\n    super(conditionStr);\n  }\n  /**\n   * @function Condition#height\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  height(operator, value) {\n    return this.predicate(\"h\", operator, value);\n  }\n  /**\n   * @function Condition#width\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  width(operator, value) {\n    return this.predicate(\"w\", operator, value);\n  }\n  /**\n   * @function Condition#aspectRatio\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  aspectRatio(operator, value) {\n    return this.predicate(\"ar\", operator, value);\n  }\n  /**\n   * @function Condition#pages\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  pageCount(operator, value) {\n    return this.predicate(\"pc\", operator, value);\n  }\n  /**\n   * @function Condition#faces\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  faceCount(operator, value) {\n    return this.predicate(\"fc\", operator, value);\n  }\n  /**\n   * @function Condition#duration\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  duration(operator, value) {\n    return this.predicate(\"du\", operator, value);\n  }\n  /**\n   * @function Condition#initialDuration\n   * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n   * @param {string|number} value the right hand side value\n   * @return {Condition} this condition\n   */\n\n\n  initialDuration(operator, value) {\n    return this.predicate(\"idu\", operator, value);\n  }\n\n}\n\nexport default Condition;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/backwards/condition.js"],"names":["Expression","Condition","constructor","conditionStr","height","operator","value","predicate","width","aspectRatio","pageCount","faceCount","duration","initialDuration"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,iBAAvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,SAAN,SAAwBD,UAAxB,CAAmC;AAC/BE,EAAAA,WAAW,CAACC,YAAD,EAAe;AACtB,UAAMA,YAAN;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,MAAM,CAACC,QAAD,EAAWC,KAAX,EAAkB;AACpB,WAAO,KAAKC,SAAL,CAAe,GAAf,EAAoBF,QAApB,EAA8BC,KAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,KAAK,CAACH,QAAD,EAAWC,KAAX,EAAkB;AACnB,WAAO,KAAKC,SAAL,CAAe,GAAf,EAAoBF,QAApB,EAA8BC,KAA9B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIG,EAAAA,WAAW,CAACJ,QAAD,EAAWC,KAAX,EAAkB;AACzB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACII,EAAAA,SAAS,CAACL,QAAD,EAAWC,KAAX,EAAkB;AACvB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIK,EAAAA,SAAS,CAACN,QAAD,EAAWC,KAAX,EAAkB;AACvB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIM,EAAAA,QAAQ,CAACP,QAAD,EAAWC,KAAX,EAAkB;AACtB,WAAO,KAAKC,SAAL,CAAe,IAAf,EAAqBF,QAArB,EAA+BC,KAA/B,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,eAAe,CAACR,QAAD,EAAWC,KAAX,EAAkB;AAC7B,WAAO,KAAKC,SAAL,CAAe,KAAf,EAAsBF,QAAtB,EAAgCC,KAAhC,CAAP;AACH;;AAlE8B;;AAoEnC,eAAeL,SAAf","sourcesContent":["import Expression from './expression.js';\n/**\n * Represents a transformation condition.\n * @param {string} conditionStr - a condition in string format\n * @class Condition\n * @example\n * // normally this class is not instantiated directly\n * var tr = cloudinary.Transformation.new()\n *    .if().width( \">\", 1000).and().aspectRatio(\"<\", \"3:4\").then()\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n * var tr = cloudinary.Transformation.new()\n *    .if(\"w > 1000 and aspectRatio < 3:4\")\n *      .width(1000)\n *      .crop(\"scale\")\n *    .else()\n *      .width(500)\n *      .crop(\"scale\")\n *\n */\nclass Condition extends Expression {\n    constructor(conditionStr) {\n        super(conditionStr);\n    }\n    /**\n     * @function Condition#height\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    height(operator, value) {\n        return this.predicate(\"h\", operator, value);\n    }\n    /**\n     * @function Condition#width\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    width(operator, value) {\n        return this.predicate(\"w\", operator, value);\n    }\n    /**\n     * @function Condition#aspectRatio\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    aspectRatio(operator, value) {\n        return this.predicate(\"ar\", operator, value);\n    }\n    /**\n     * @function Condition#pages\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    pageCount(operator, value) {\n        return this.predicate(\"pc\", operator, value);\n    }\n    /**\n     * @function Condition#faces\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    faceCount(operator, value) {\n        return this.predicate(\"fc\", operator, value);\n    }\n    /**\n     * @function Condition#duration\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    duration(operator, value) {\n        return this.predicate(\"du\", operator, value);\n    }\n    /**\n     * @function Condition#initialDuration\n     * @param {string} operator the comparison operator (e.g. \"<\", \"lt\")\n     * @param {string|number} value the right hand side value\n     * @return {Condition} this condition\n     */\n    initialDuration(operator, value) {\n        return this.predicate(\"idu\", operator, value);\n    }\n}\nexport default Condition;\n"]},"metadata":{},"sourceType":"module"}