{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass VectorizeEffectAction extends Action {\n  constructor() {\n    super();\n    this._actionModel = {};\n    this._actionModel.actionType = 'vectorize';\n  }\n  /**\n   * @description The number of colors. (Range: 2 to 30, Server default: 10)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  numOfColors(num) {\n    this._actionModel.numOfColors = num;\n    this._numOfColors = num;\n    return this;\n  }\n  /**\n   * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  detailsLevel(num) {\n    this._actionModel.detailLevel = num;\n    this._detailsLevel = num;\n    return this;\n  }\n  /**\n   * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  despeckleLevel(num) {\n    this._actionModel.despeckleLevel = num;\n    this._despeckleLevel = num;\n    return this;\n  }\n  /**\n   * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n   * @param {number | string} num\n   * @return {this}\n   */\n\n\n  cornersLevel(num) {\n    this._actionModel.cornersLevel = num;\n    this._cornersLevel = num;\n    return this;\n  }\n  /**\n   * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n   * @param {number} num\n   * @return {this}\n   */\n\n\n  paths(num) {\n    this._actionModel.paths = num;\n    this._paths = num;\n    return this;\n  }\n\n  prepareQualifiers() {\n    let str = 'vectorize';\n\n    if (this._numOfColors) {\n      str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n    }\n\n    if (this._detailsLevel) {\n      str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n    }\n\n    if (this._despeckleLevel) {\n      str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n    }\n\n    if (this._paths) {\n      str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n    }\n\n    if (this._cornersLevel) {\n      str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n    }\n\n    this.addQualifier(new Qualifier('e', str));\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      paths,\n      cornersLevel,\n      despeckleLevel,\n      detailLevel,\n      numOfColors\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this();\n    paths && result.paths(paths);\n    cornersLevel && result.cornersLevel(cornersLevel);\n    despeckleLevel && result.despeckleLevel(despeckleLevel);\n    detailLevel && result.detailsLevel(detailLevel);\n    numOfColors && result.numOfColors(numOfColors);\n    return result;\n  }\n\n}\n\nexport { VectorizeEffectAction };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/effect/Vectorize.js"],"names":["Action","Qualifier","QualifierValue","VectorizeEffectAction","constructor","_actionModel","actionType","numOfColors","num","_numOfColors","detailsLevel","detailLevel","_detailsLevel","despeckleLevel","_despeckleLevel","cornersLevel","_cornersLevel","paths","_paths","prepareQualifiers","str","toString","addQualifier","fromJson","actionModel","result"],"mappings":"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","sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Qualifier } from \"../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../internal/qualifier/QualifierValue.js\";\n/**\n * @description Vectorizes the image.\n * @extends SDK.Action\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass VectorizeEffectAction extends Action {\n    constructor() {\n        super();\n        this._actionModel = {};\n        this._actionModel.actionType = 'vectorize';\n    }\n    /**\n     * @description The number of colors. (Range: 2 to 30, Server default: 10)\n     * @param {number | string} num\n     * @return {this}\n     */\n    numOfColors(num) {\n        this._actionModel.numOfColors = num;\n        this._numOfColors = num;\n        return this;\n    }\n    /**\n     * @description The level of detail. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 1000). (Server default: 300)\n     * @param {number | string} num\n     * @return {this}\n     */\n    detailsLevel(num) {\n        this._actionModel.detailLevel = num;\n        this._detailsLevel = num;\n        return this;\n    }\n    /**\n     * @description The size of speckles to suppress. Specify either a percentage of the original image (Range: 0.0 to 1.0) or an absolute number of pixels (Range: 0 to 100, Server default: 2)\n     * @param {number | string} num\n     * @return {this}\n     */\n    despeckleLevel(num) {\n        this._actionModel.despeckleLevel = num;\n        this._despeckleLevel = num;\n        return this;\n    }\n    /**\n     * @description The corner threshold. Specify 100 for no smoothing (polygon corners), 0 for completely smooth corners. (Range: 0 to 100, Default: 25)\n     * @param {number | string} num\n     * @return {this}\n     */\n    cornersLevel(num) {\n        this._actionModel.cornersLevel = num;\n        this._cornersLevel = num;\n        return this;\n    }\n    /**\n     * @description The optimization value. Specify 100 for least optimization and the largest file. (Range: 0 to 100, Server default: 100).\n     * @param {number} num\n     * @return {this}\n     */\n    paths(num) {\n        this._actionModel.paths = num;\n        this._paths = num;\n        return this;\n    }\n    prepareQualifiers() {\n        let str = 'vectorize';\n        if (this._numOfColors) {\n            str += `:${new QualifierValue(`colors:${this._numOfColors}`).toString()}`;\n        }\n        if (this._detailsLevel) {\n            str += `:${new QualifierValue(`detail:${this._detailsLevel}`).toString()}`;\n        }\n        if (this._despeckleLevel) {\n            str += `:${new QualifierValue(`despeckle:${this._despeckleLevel}`).toString()}`;\n        }\n        if (this._paths) {\n            str += `:${new QualifierValue(`paths:${this._paths}`).toString()}`;\n        }\n        if (this._cornersLevel) {\n            str += `:${new QualifierValue(`corners:${this._cornersLevel}`).toString()}`;\n        }\n        this.addQualifier(new Qualifier('e', str));\n    }\n    static fromJson(actionModel) {\n        const { actionType, paths, cornersLevel, despeckleLevel, detailLevel, numOfColors } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this();\n        paths && result.paths(paths);\n        cornersLevel && result.cornersLevel(cornersLevel);\n        despeckleLevel && result.despeckleLevel(despeckleLevel);\n        detailLevel && result.detailsLevel(detailLevel);\n        numOfColors && result.numOfColors(numOfColors);\n        return result;\n    }\n}\nexport { VectorizeEffectAction };\n"]},"metadata":{},"sourceType":"module"}