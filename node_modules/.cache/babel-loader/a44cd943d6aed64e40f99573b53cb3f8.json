{"ast":null,"code":"import { Action } from \"../../internal/Action.js\";\nimport { Transformation } from \"../../transformation/Transformation.js\";\nimport { VideoSource } from \"../../qualifiers/source/sourceTypes/VideoSource.js\";\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos|Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\n\nclass ConcatenateAction extends Action {\n  /**\n   *\n   * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n   *         the Source to concatenate\n   */\n  constructor(source) {\n    super();\n    this._actionModel = {\n      actionType: 'concatenate',\n      source: source.toJson()\n    };\n    this.concatSource = source;\n  }\n  /**\n   * @description Sets the transition between a video and a concatenated source\n   * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n   * @return {this}\n   */\n\n\n  transition(source) {\n    this._actionModel.transition = source.toJson();\n    this._transition = source;\n    return this;\n  }\n  /**\n   * @description Prepend the concatenated video - Adds the video before the original\n   * @return {this}\n   */\n\n\n  prepend() {\n    this._actionModel.prepend = true;\n    this._prepend = true;\n    return this;\n  }\n  /**\n   * The duration in seconds\n   * @param {number} sec\n   * @return {this}\n   */\n\n\n  duration(sec) {\n    this._actionModel.duration = sec;\n    this._duration = sec;\n    return this;\n  }\n  /**\n   * @description Get the transitionString for the toString() method\n   * @return {string}\n   */\n\n\n  getTransitionString() {\n    const transTx = this._transition.getTransformation();\n\n    return [`e_transition,${this._transition.getOpenSourceString('l')}`, transTx && transTx.toString(), 'fl_layer_apply'].filter(a => a).join('/');\n  }\n  /**\n   * @description Get the string representation of the Concatenation action\n   */\n\n\n  toString() {\n    /*\n     *\n     * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n     *\n     * First, we calculate the open and close parts of the top-level transformation:\n     *   - {open}/{sourceTransformation}/{close}\n     *\n     * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n     * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n     * - fl_splice is also added, but only if a transition is not needed.\n     *\n     * once we've calculated the open and close parts, we now need to deal with the Transition.\n     * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n     *\n     * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n     */\n    // Calculate the open part\n    const open = [this._duration && `du_${this._duration}`, !this._transition && `fl_splice`, `${this.concatSource.getOpenSourceString('l')}`].filter(a => a).join(','); // Calculate the open part\n\n    const close = ['fl_layer_apply', this._prepend && 'so_0'].filter(a => a).join(','); // Calculate the Transition part\n\n    let concatSourceTx;\n\n    if (this.concatSource.getTransformation()) {\n      concatSourceTx = this.concatSource.getTransformation();\n    } else {\n      concatSourceTx = new Transformation();\n    }\n\n    if (this._transition) {\n      concatSourceTx.addTransformation(this.getTransitionString());\n    } // Put it all together, the transition is already part of the concatSourceTx\n\n\n    return [open, concatSourceTx.toString(), close].filter(a => a).join('/');\n  }\n\n  static fromJson(actionModel, transformationFromJson) {\n    const {\n      source,\n      transition,\n      prepend,\n      duration\n    } = actionModel;\n    const sourceInstance = createSourceFromModel(source, transformationFromJson); // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(sourceInstance);\n\n    if (transition) {\n      result.transition(VideoSource.fromJson(transition, transformationFromJson));\n    }\n\n    if (prepend) {\n      result.prepend();\n    }\n\n    if (duration) {\n      result.duration(duration);\n    }\n\n    return result;\n  }\n\n}\n\nexport default ConcatenateAction;","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/videoEdit/ConcatenateAction.js"],"names":["Action","Transformation","VideoSource","createSourceFromModel","ConcatenateAction","constructor","source","_actionModel","actionType","toJson","concatSource","transition","_transition","prepend","_prepend","duration","sec","_duration","getTransitionString","transTx","getTransformation","getOpenSourceString","toString","filter","a","join","open","close","concatSourceTx","addTransformation","fromJson","actionModel","transformationFromJson","sourceInstance","result"],"mappings":"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","sourcesContent":["import { Action } from \"../../internal/Action.js\";\nimport { Transformation } from \"../../transformation/Transformation.js\";\nimport { VideoSource } from \"../../qualifiers/source/sourceTypes/VideoSource.js\";\nimport { createSourceFromModel } from \"../../internal/models/createSourceFromModel.js\";\n/**\n * @description Class for Concatenating another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos|Concatenating videos}\n * @extends SDK.Action\n * @memberOf Actions.VideoEdit\n * @see Visit {@link Actions.VideoEdit|VideoEdit} for an example\n */\nclass ConcatenateAction extends Action {\n    /**\n     *\n     * @param {Qualifiers.Source.VideoSource | Qualifiers.Source.ImageSource | Qualifiers.Source.FetchSource} source\n     *         the Source to concatenate\n     */\n    constructor(source) {\n        super();\n        this._actionModel = {\n            actionType: 'concatenate',\n            source: source.toJson()\n        };\n        this.concatSource = source;\n    }\n    /**\n     * @description Sets the transition between a video and a concatenated source\n     * @param {Qualifiers.Transition.VideoSource} source The source to concatenate.\n     * @return {this}\n     */\n    transition(source) {\n        this._actionModel.transition = source.toJson();\n        this._transition = source;\n        return this;\n    }\n    /**\n     * @description Prepend the concatenated video - Adds the video before the original\n     * @return {this}\n     */\n    prepend() {\n        this._actionModel.prepend = true;\n        this._prepend = true;\n        return this;\n    }\n    /**\n     * The duration in seconds\n     * @param {number} sec\n     * @return {this}\n     */\n    duration(sec) {\n        this._actionModel.duration = sec;\n        this._duration = sec;\n        return this;\n    }\n    /**\n     * @description Get the transitionString for the toString() method\n     * @return {string}\n     */\n    getTransitionString() {\n        const transTx = this._transition.getTransformation();\n        return [\n            `e_transition,${this._transition.getOpenSourceString('l')}`,\n            transTx && transTx.toString(),\n            'fl_layer_apply'\n        ].filter((a) => a).join('/');\n    }\n    /**\n     * @description Get the string representation of the Concatenation action\n     */\n    toString() {\n        /*\n         *\n         * The toString() method is composed of several steps due to the complex nature of the concatenate transformation.\n         *\n         * First, we calculate the open and close parts of the top-level transformation:\n         *   - {open}/{sourceTransformation}/{close}\n         *\n         * Unlike a regular overlay, there are multiple 'bits' appended to the open and close parts of the tx.\n         * - duration (du_) might be prepended on the opening of the layer (du_5,l_sample)\n         * - fl_splice is also added, but only if a transition is not needed.\n         *\n         * once we've calculated the open and close parts, we now need to deal with the Transition.\n         * the transition is an inner transformation on the source with a special effect (e_transition) appended to it.\n         *\n         * To calculate the transition string, we need to take the transformation from the source(assuming it has one)\n         */\n        // Calculate the open part\n        const open = [\n            this._duration && `du_${this._duration}`,\n            !this._transition && `fl_splice`,\n            `${this.concatSource.getOpenSourceString('l')}`\n        ].filter((a) => a).join(',');\n        // Calculate the open part\n        const close = [\n            'fl_layer_apply',\n            this._prepend && 'so_0'\n        ].filter((a) => a).join(',');\n        // Calculate the Transition part\n        let concatSourceTx;\n        if (this.concatSource.getTransformation()) {\n            concatSourceTx = this.concatSource.getTransformation();\n        }\n        else {\n            concatSourceTx = new Transformation();\n        }\n        if (this._transition) {\n            concatSourceTx.addTransformation(this.getTransitionString());\n        }\n        // Put it all together, the transition is already part of the concatSourceTx\n        return [\n            open,\n            concatSourceTx.toString(),\n            close\n        ].filter((a) => a).join('/');\n    }\n    static fromJson(actionModel, transformationFromJson) {\n        const { source, transition, prepend, duration } = actionModel;\n        const sourceInstance = createSourceFromModel(source, transformationFromJson);\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(sourceInstance);\n        if (transition) {\n            result.transition(VideoSource.fromJson(transition, transformationFromJson));\n        }\n        if (prepend) {\n            result.prepend();\n        }\n        if (duration) {\n            result.duration(duration);\n        }\n        return result;\n    }\n}\nexport default ConcatenateAction;\n"]},"metadata":{},"sourceType":"module"}