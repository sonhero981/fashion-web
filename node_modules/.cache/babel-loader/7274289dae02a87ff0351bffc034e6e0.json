{"ast":null,"code":"import { AdvVideoCodecType, VideoCodecType } from \"./videoCodecType/VideoCodecType.js\";\n/**\n * @description Determines the video codec to use.\n * @memberOf Qualifiers\n * @namespace VideoCodec\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n\n/**\n * @summary qualifier\n * @description Auto video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\n\nfunction auto() {\n  return new VideoCodecType('auto');\n}\n/**\n * @summary qualifier\n * @description Video codec h264.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.AdvVideoCodecType}\n */\n\n\nfunction h264() {\n  return new AdvVideoCodecType('h264');\n}\n/**\n * @summary qualifier\n * @description h265 video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\n\n\nfunction h265() {\n  return new VideoCodecType('h265');\n}\n/**\n * @summary qualifier\n * @description Video codec proRes (Apple ProRes 422 HQ).\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\n\n\nfunction proRes() {\n  return new VideoCodecType('prores');\n}\n/**\n * @summary qualifier\n * @description Video codec theora.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\n\n\nfunction theora() {\n  return new VideoCodecType('theora');\n}\n/**\n * @summary qualifier\n * @description Video codec vp8.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\n\n\nfunction vp8() {\n  return new VideoCodecType('vp8');\n}\n/**\n * @summary qualifier\n * @description Video codec vp9.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\n\n\nfunction vp9() {\n  return new VideoCodecType('vp9');\n}\n\nexport const VIDEO_CODEC_TO_TRANSFORMATION = {\n  'auto': auto(),\n  'h264': h264(),\n  'h265': h265(),\n  'prores': proRes(),\n  'theora': theora(),\n  'vp8': vp8(),\n  'vp9': vp9()\n};\nconst VideoCodec = {\n  auto,\n  h264,\n  h265,\n  proRes,\n  theora,\n  vp8,\n  vp9\n};\nexport { VideoCodec, auto, h264, h265, proRes, theora, vp8, vp9 };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/qualifiers/videoCodec.js"],"names":["AdvVideoCodecType","VideoCodecType","auto","h264","h265","proRes","theora","vp8","vp9","VIDEO_CODEC_TO_TRANSFORMATION","VideoCodec"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,cAA5B,QAAkD,oCAAlD;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,IAAT,GAAgB;AACZ,SAAO,IAAID,cAAJ,CAAmB,MAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,IAAT,GAAgB;AACZ,SAAO,IAAIH,iBAAJ,CAAsB,MAAtB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,IAAT,GAAgB;AACZ,SAAO,IAAIH,cAAJ,CAAmB,MAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASI,MAAT,GAAkB;AACd,SAAO,IAAIJ,cAAJ,CAAmB,QAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,MAAT,GAAkB;AACd,SAAO,IAAIL,cAAJ,CAAmB,QAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASM,GAAT,GAAe;AACX,SAAO,IAAIN,cAAJ,CAAmB,KAAnB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,GAAT,GAAe;AACX,SAAO,IAAIP,cAAJ,CAAmB,KAAnB,CAAP;AACH;;AACD,OAAO,MAAMQ,6BAA6B,GAAG;AACzC,UAAQP,IAAI,EAD6B;AAEzC,UAAQC,IAAI,EAF6B;AAGzC,UAAQC,IAAI,EAH6B;AAIzC,YAAUC,MAAM,EAJyB;AAKzC,YAAUC,MAAM,EALyB;AAMzC,SAAOC,GAAG,EAN+B;AAOzC,SAAOC,GAAG;AAP+B,CAAtC;AASP,MAAME,UAAU,GAAG;AAAER,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA,MAApB;AAA4BC,EAAAA,MAA5B;AAAoCC,EAAAA,GAApC;AAAyCC,EAAAA;AAAzC,CAAnB;AACA,SAASE,UAAT,EAAqBR,IAArB,EAA2BC,IAA3B,EAAiCC,IAAjC,EAAuCC,MAAvC,EAA+CC,MAA/C,EAAuDC,GAAvD,EAA4DC,GAA5D","sourcesContent":["import { AdvVideoCodecType, VideoCodecType } from \"./videoCodecType/VideoCodecType.js\";\n/**\n * @description Determines the video codec to use.\n * @memberOf Qualifiers\n * @namespace VideoCodec\n * @see Visit {@link Actions.Transcode|Transcode} for an example\n */\n/**\n * @summary qualifier\n * @description Auto video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction auto() {\n    return new VideoCodecType('auto');\n}\n/**\n * @summary qualifier\n * @description Video codec h264.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.AdvVideoCodecType}\n */\nfunction h264() {\n    return new AdvVideoCodecType('h264');\n}\n/**\n * @summary qualifier\n * @description h265 video codec.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction h265() {\n    return new VideoCodecType('h265');\n}\n/**\n * @summary qualifier\n * @description Video codec proRes (Apple ProRes 422 HQ).\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction proRes() {\n    return new VideoCodecType('prores');\n}\n/**\n * @summary qualifier\n * @description Video codec theora.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction theora() {\n    return new VideoCodecType('theora');\n}\n/**\n * @summary qualifier\n * @description Video codec vp8.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp8() {\n    return new VideoCodecType('vp8');\n}\n/**\n * @summary qualifier\n * @description Video codec vp9.\n * @memberOf Qualifiers.VideoCodec\n * @returns {Qualifiers.VideoCodec.VideoCodecType}\n */\nfunction vp9() {\n    return new VideoCodecType('vp9');\n}\nexport const VIDEO_CODEC_TO_TRANSFORMATION = {\n    'auto': auto(),\n    'h264': h264(),\n    'h265': h265(),\n    'prores': proRes(),\n    'theora': theora(),\n    'vp8': vp8(),\n    'vp9': vp9()\n};\nconst VideoCodec = { auto, h264, h265, proRes, theora, vp8, vp9 };\nexport { VideoCodec, auto, h264, h265, proRes, theora, vp8, vp9 };\n"]},"metadata":{},"sourceType":"module"}