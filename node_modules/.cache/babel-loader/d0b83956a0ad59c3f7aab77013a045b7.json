{"ast":null,"code":"import TrimAction from './videoEdit/TrimAction.js';\nimport ConcatenateAction from './videoEdit/ConcatenateAction.js';\nimport VolumeAction from \"./videoEdit/VolumeAction.js\";\nimport { PreviewAction } from \"./videoEdit/PreviewAction.js\";\n/**\n * @summary action\n * @description Methods for editing a video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery|Video manipulation}\n * @memberOf Actions\n * @namespace VideoEdit\n * @example\n * See the examples under every method\n */\n\n/**\n * @summary action\n * @description Concatenates another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos|Concatenating videos}\n *\n * @memberOf Actions.VideoEdit\n * @param {VideoSource} source The source to concatenate.\n * @return {Actions.VideoEdit.ConcatenateAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {concatenate} from \"@cloudinary/url-gen/actions/videoEdit\";\n * import {videoSource as concatVideoSource} from \"@cloudinary/url-gen/qualifiers/concatenate\";\n * import {videoSource as tVideoSource} from \"@cloudinary/url-gen/qualifiers/transition.js\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( concatenate(concatVideoSource('butterfly'))\n *  .transition(tVideoSource('myTransition'))\n *  .duration(5)\n * )\n */\n\nfunction concatenate(source) {\n  return new ConcatenateAction(source);\n}\n/**\n * @summary action\n * @description Trims a video (and discards the rest).\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#trimming_videos|\n  * Trimming videos}\n *\n * @memberOf Actions.VideoEdit\n * @return {Actions.VideoEdit.TrimAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {trim} from \"@cloudinary/url-gen/actions/videoEdit\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( trim()\n *  .startOffset(3)\n *  .endOffset(4)\n *  .duration(10)\n * )\n */\n\n\nfunction trim() {\n  return new TrimAction();\n}\n/**\n * @summary action\n * @description Increases or decreases the volume by a percentage of the current volume.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#adjust_the_audio_volume|\n  * Adjust the audio volume}\n *\n * @memberOf Actions.VideoEdit\n * @param {string | number} volumeValue The value of volume. The percentage change of volume (Range: -100 to 400).\n * For a list of supported types see {@link Qualifiers.Volume| Volume values}\n * @return {Actions.VideoEdit.VolumeAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {volume} from \"@cloudinary/url-gen/actions/videoEdit\";\n * import {mute} from '@cloudinary/url-gen/qualifiers/volume';\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( volume(10) ) // as percent\n * video.videoEdit( volume('5db') ) // as decibels\n * video.videoEdit( volume(mute()) ) // if you prefer silence..\n */\n\n\nfunction volume(volumeValue) {\n  return new VolumeAction(volumeValue);\n}\n/**\n * @summary action\n * @description A video preview is a short excerpt from a video that can be used to engage your audience and help them select the video content that interests them.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#generate_an_ai_based_video_preview|\n  * Create a video preview}\n *\n * @memberOf Actions.VideoEdit\n * @return {Actions.VideoEdit.PreviewAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {preview} from \"@cloudinary/url-gen/actions/videoEdit\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( preview()\n *  .duration(5)\n *  .minimumSegmentDuration(1)\n *  .maximumSegments(10)\n * )\n */\n\n\nfunction preview() {\n  return new PreviewAction();\n}\n\nconst VideoEdit = {\n  concatenate,\n  trim,\n  volume,\n  preview\n};\nexport { VideoEdit, concatenate, trim, volume, preview };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/videoEdit.js"],"names":["TrimAction","ConcatenateAction","VolumeAction","PreviewAction","concatenate","source","trim","volume","volumeValue","preview","VideoEdit"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,2BAAvB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,YAAP,MAAyB,6BAAzB;AACA,SAASC,aAAT,QAA8B,8BAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,WAAT,CAAqBC,MAArB,EAA6B;AACzB,SAAO,IAAIJ,iBAAJ,CAAsBI,MAAtB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,IAAT,GAAgB;AACZ,SAAO,IAAIN,UAAJ,EAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASO,MAAT,CAAgBC,WAAhB,EAA6B;AACzB,SAAO,IAAIN,YAAJ,CAAiBM,WAAjB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,OAAT,GAAmB;AACf,SAAO,IAAIN,aAAJ,EAAP;AACH;;AACD,MAAMO,SAAS,GAAG;AAAEN,EAAAA,WAAF;AAAeE,EAAAA,IAAf;AAAqBC,EAAAA,MAArB;AAA6BE,EAAAA;AAA7B,CAAlB;AACA,SAASC,SAAT,EAAoBN,WAApB,EAAiCE,IAAjC,EAAuCC,MAAvC,EAA+CE,OAA/C","sourcesContent":["import TrimAction from './videoEdit/TrimAction.js';\nimport ConcatenateAction from './videoEdit/ConcatenateAction.js';\nimport VolumeAction from \"./videoEdit/VolumeAction.js\";\nimport { PreviewAction } from \"./videoEdit/PreviewAction.js\";\n/**\n * @summary action\n * @description Methods for editing a video.\n *\n * <b>Learn more:</b> {@link https://cloudinary.com/documentation/video_manipulation_and_delivery|Video manipulation}\n * @memberOf Actions\n * @namespace VideoEdit\n * @example\n * See the examples under every method\n */\n/**\n * @summary action\n * @description Concatenates another video.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#concatenating_videos|Concatenating videos}\n *\n * @memberOf Actions.VideoEdit\n * @param {VideoSource} source The source to concatenate.\n * @return {Actions.VideoEdit.ConcatenateAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {concatenate} from \"@cloudinary/url-gen/actions/videoEdit\";\n * import {videoSource as concatVideoSource} from \"@cloudinary/url-gen/qualifiers/concatenate\";\n * import {videoSource as tVideoSource} from \"@cloudinary/url-gen/qualifiers/transition.js\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( concatenate(concatVideoSource('butterfly'))\n *  .transition(tVideoSource('myTransition'))\n *  .duration(5)\n * )\n */\nfunction concatenate(source) {\n    return new ConcatenateAction(source);\n}\n/**\n * @summary action\n * @description Trims a video (and discards the rest).\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#trimming_videos|\n  * Trimming videos}\n *\n * @memberOf Actions.VideoEdit\n * @return {Actions.VideoEdit.TrimAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {trim} from \"@cloudinary/url-gen/actions/videoEdit\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( trim()\n *  .startOffset(3)\n *  .endOffset(4)\n *  .duration(10)\n * )\n */\nfunction trim() {\n    return new TrimAction();\n}\n/**\n * @summary action\n * @description Increases or decreases the volume by a percentage of the current volume.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/audio_transformations#adjust_the_audio_volume|\n  * Adjust the audio volume}\n *\n * @memberOf Actions.VideoEdit\n * @param {string | number} volumeValue The value of volume. The percentage change of volume (Range: -100 to 400).\n * For a list of supported types see {@link Qualifiers.Volume| Volume values}\n * @return {Actions.VideoEdit.VolumeAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {volume} from \"@cloudinary/url-gen/actions/videoEdit\";\n * import {mute} from '@cloudinary/url-gen/qualifiers/volume';\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( volume(10) ) // as percent\n * video.videoEdit( volume('5db') ) // as decibels\n * video.videoEdit( volume(mute()) ) // if you prefer silence..\n */\nfunction volume(volumeValue) {\n    return new VolumeAction(volumeValue);\n}\n/**\n * @summary action\n * @description A video preview is a short excerpt from a video that can be used to engage your audience and help them select the video content that interests them.\n *\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/video_manipulation_and_delivery#generate_an_ai_based_video_preview|\n  * Create a video preview}\n *\n * @memberOf Actions.VideoEdit\n * @return {Actions.VideoEdit.PreviewAction}\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {preview} from \"@cloudinary/url-gen/actions/videoEdit\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const video = yourCldInstance.video('dog');\n *\n * video.videoEdit( preview()\n *  .duration(5)\n *  .minimumSegmentDuration(1)\n *  .maximumSegments(10)\n * )\n */\nfunction preview() {\n    return new PreviewAction();\n}\nconst VideoEdit = { concatenate, trim, volume, preview };\nexport { VideoEdit, concatenate, trim, volume, preview };\n"]},"metadata":{},"sourceType":"module"}