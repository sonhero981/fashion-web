{"ast":null,"code":"import { Action } from \"../internal/Action.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @description Delivers an animated GIF that contains additional loops of the GIF.\n * The total number of iterations is the number of additional loops plus one.\n * You can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n *\n * @memberOf Actions\n * @namespace Animated\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {animated} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n\n/**\n * @memberOf Actions.Animated\n * @see Actions.Animated\n * @example\n * // Used through a builder function Animated.edit(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {edit} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n\nclass AnimatedAction extends Action {\n  constructor() {\n    super();\n  }\n  /**\n   * @description Controls the time delay between the frames of an animated image, in milliseconds.\n   * @param {number} delayValue The delay in milliseconds\n   * @return {this}\n   */\n\n\n  delay(delayValue) {\n    this.addQualifier(new Qualifier('dl', delayValue));\n    return this;\n  }\n  /**\n   * @description Delivers an animated GIF that contains additional loops of the GIF.\n   * @param {number} additionalLoops The additional number of times to play the animated GIF.\n   * @return {this}\n   */\n\n\n  loop(additionalLoops) {\n    const qualifierValue = new QualifierValue(['loop', additionalLoops]).setDelimiter(':');\n    this.addQualifier(new Qualifier('e', qualifierValue));\n    return this;\n  }\n\n}\n/**\n * @summary action\n * @memberOf Actions.Animated\n * @description Delivers an animated GIF.\n * @return {Actions.Animated.AnimatedAction}\n */\n\n\nfunction edit() {\n  return new AnimatedAction();\n}\n\nconst Animated = {\n  edit\n};\nexport { AnimatedAction, Animated, edit };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/actions/animated.js"],"names":["Action","Qualifier","QualifierValue","AnimatedAction","constructor","delay","delayValue","addQualifier","loop","additionalLoops","qualifierValue","setDelimiter","edit","Animated"],"mappings":"AAAA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,SAAT,QAA0B,oCAA1B;AACA,SAASC,cAAT,QAA+B,yCAA/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,SAA6BH,MAA7B,CAAoC;AAChCI,EAAAA,WAAW,GAAG;AACV;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA,KAAK,CAACC,UAAD,EAAa;AACd,SAAKC,YAAL,CAAkB,IAAIN,SAAJ,CAAc,IAAd,EAAoBK,UAApB,CAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIE,EAAAA,IAAI,CAACC,eAAD,EAAkB;AAClB,UAAMC,cAAc,GAAG,IAAIR,cAAJ,CAAmB,CAAC,MAAD,EAASO,eAAT,CAAnB,EAA8CE,YAA9C,CAA2D,GAA3D,CAAvB;AACA,SAAKJ,YAAL,CAAkB,IAAIN,SAAJ,CAAc,GAAd,EAAmBS,cAAnB,CAAlB;AACA,WAAO,IAAP;AACH;;AAtB+B;AAwBpC;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,IAAT,GAAgB;AACZ,SAAO,IAAIT,cAAJ,EAAP;AACH;;AACD,MAAMU,QAAQ,GAAG;AACbD,EAAAA;AADa,CAAjB;AAGA,SAAST,cAAT,EAAyBU,QAAzB,EAAmCD,IAAnC","sourcesContent":["import { Action } from \"../internal/Action.js\";\nimport { Qualifier } from \"../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../internal/qualifier/QualifierValue.js\";\n/**\n * @description Delivers an animated GIF that contains additional loops of the GIF.\n * The total number of iterations is the number of additional loops plus one.\n * You can also specify the loop effect without a numeric value to instruct it to loop the GIF infinitely.\n *\n * @memberOf Actions\n * @namespace Animated\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {animated} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\n/**\n * @memberOf Actions.Animated\n * @see Actions.Animated\n * @example\n * // Used through a builder function Animated.edit(), and not by creating a new instance\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {edit} from \"@cloudinary/url-gen/actions/animated\";\n *\n * const yourCldInstance = new Cloudinary({cloud:{cloudName:'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.animated(edit().delay(200).loop(3)));\n */\nclass AnimatedAction extends Action {\n    constructor() {\n        super();\n    }\n    /**\n     * @description Controls the time delay between the frames of an animated image, in milliseconds.\n     * @param {number} delayValue The delay in milliseconds\n     * @return {this}\n     */\n    delay(delayValue) {\n        this.addQualifier(new Qualifier('dl', delayValue));\n        return this;\n    }\n    /**\n     * @description Delivers an animated GIF that contains additional loops of the GIF.\n     * @param {number} additionalLoops The additional number of times to play the animated GIF.\n     * @return {this}\n     */\n    loop(additionalLoops) {\n        const qualifierValue = new QualifierValue(['loop', additionalLoops]).setDelimiter(':');\n        this.addQualifier(new Qualifier('e', qualifierValue));\n        return this;\n    }\n}\n/**\n * @summary action\n * @memberOf Actions.Animated\n * @description Delivers an animated GIF.\n * @return {Actions.Animated.AnimatedAction}\n */\nfunction edit() {\n    return new AnimatedAction();\n}\nconst Animated = {\n    edit\n};\nexport { AnimatedAction, Animated, edit };\n"]},"metadata":{},"sourceType":"module"}