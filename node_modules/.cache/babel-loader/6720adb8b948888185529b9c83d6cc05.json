{"ast":null,"code":"import { BaseSource } from \"../BaseSource.js\";\nimport { TextStyle } from \"../../textStyle.js\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\n\nclass BaseTextSource extends BaseSource {\n  constructor(text, textStyle) {\n    super();\n    this.type = 'text';\n    this.text = text;\n    this._textStyle = textStyle;\n    this._qualifierModel.sourceType = 'text';\n    this._qualifierModel.text = text;\n\n    if (textStyle instanceof TextStyle) {\n      this._qualifierModel.textStyle = textStyle.toJson();\n    }\n  }\n\n  encodeText(text) {\n    return serializeCloudinaryCharacters(text);\n  }\n\n  textColor(color) {\n    this._textColor = color;\n    this._qualifierModel.textColor = color;\n    return this;\n  }\n\n  backgroundColor(bgColor) {\n    this._backgroundColor = bgColor;\n    this._qualifierModel.backgroundColor = bgColor;\n    return this;\n  }\n\n  textFit(textFit) {\n    this._textFit = textFit;\n    return this;\n  }\n  /**\n   * @description\n   * Returns the opening string of the layer,\n   * This method is used internally within {@link SDK.LayerAction|LayerAction}\n   * @returns {string}\n   */\n\n\n  getOpenSourceString(layerType) {\n    const layerParam = [this.type, this._textStyle && this._textStyle.toString(), this.encodeText(this.text)].filter(a => a).join(':');\n    const tmpAction = new Action();\n    tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n    this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n    this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n    this._textFit && tmpAction.addQualifier(this._textFit);\n    return tmpAction.toString();\n  }\n\n}\n\nexport { BaseTextSource };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/qualifiers/source/sourceTypes/BaseTextSource.js"],"names":["BaseSource","TextStyle","serializeCloudinaryCharacters","Action","Qualifier","prepareColor","BaseTextSource","constructor","text","textStyle","type","_textStyle","_qualifierModel","sourceType","toJson","encodeText","textColor","color","_textColor","backgroundColor","bgColor","_backgroundColor","textFit","_textFit","getOpenSourceString","layerType","layerParam","toString","filter","a","join","tmpAction","addQualifier"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,6BAAT,QAA8C,0DAA9C;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,SAAT,QAA0B,0CAA1B;AACA,SAASC,YAAT,QAA6B,yCAA7B;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,cAAN,SAA6BN,UAA7B,CAAwC;AACpCO,EAAAA,WAAW,CAACC,IAAD,EAAOC,SAAP,EAAkB;AACzB;AACA,SAAKC,IAAL,GAAY,MAAZ;AACA,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,UAAL,GAAkBF,SAAlB;AACA,SAAKG,eAAL,CAAqBC,UAArB,GAAkC,MAAlC;AACA,SAAKD,eAAL,CAAqBJ,IAArB,GAA4BA,IAA5B;;AACA,QAAIC,SAAS,YAAYR,SAAzB,EAAoC;AAChC,WAAKW,eAAL,CAAqBH,SAArB,GAAiCA,SAAS,CAACK,MAAV,EAAjC;AACH;AACJ;;AACDC,EAAAA,UAAU,CAACP,IAAD,EAAO;AACb,WAAON,6BAA6B,CAACM,IAAD,CAApC;AACH;;AACDQ,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,SAAKC,UAAL,GAAkBD,KAAlB;AACA,SAAKL,eAAL,CAAqBI,SAArB,GAAiCC,KAAjC;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,eAAe,CAACC,OAAD,EAAU;AACrB,SAAKC,gBAAL,GAAwBD,OAAxB;AACA,SAAKR,eAAL,CAAqBO,eAArB,GAAuCC,OAAvC;AACA,WAAO,IAAP;AACH;;AACDE,EAAAA,OAAO,CAACA,OAAD,EAAU;AACb,SAAKC,QAAL,GAAgBD,OAAhB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,mBAAmB,CAACC,SAAD,EAAY;AAC3B,UAAMC,UAAU,GAAG,CACf,KAAKhB,IADU,EAEf,KAAKC,UAAL,IAAmB,KAAKA,UAAL,CAAgBgB,QAAhB,EAFJ,EAGf,KAAKZ,UAAL,CAAgB,KAAKP,IAArB,CAHe,EAIjBoB,MAJiB,CAITC,CAAD,IAAOA,CAJG,EAIAC,IAJA,CAIK,GAJL,CAAnB;AAKA,UAAMC,SAAS,GAAG,IAAI5B,MAAJ,EAAlB;AACA4B,IAAAA,SAAS,CAACC,YAAV,CAAuB,IAAI5B,SAAJ,CAAcqB,SAAd,EAAyBC,UAAzB,CAAvB;AACA,SAAKR,UAAL,IAAmBa,SAAS,CAACC,YAAV,CAAuB,IAAI5B,SAAJ,CAAc,IAAd,EAAoBC,YAAY,CAAC,KAAKa,UAAN,CAAhC,CAAvB,CAAnB;AACA,SAAKG,gBAAL,IAAyBU,SAAS,CAACC,YAAV,CAAuB,IAAI5B,SAAJ,CAAc,GAAd,EAAmBC,YAAY,CAAC,KAAKgB,gBAAN,CAA/B,CAAvB,CAAzB;AACA,SAAKE,QAAL,IAAiBQ,SAAS,CAACC,YAAV,CAAuB,KAAKT,QAA5B,CAAjB;AACA,WAAOQ,SAAS,CAACJ,QAAV,EAAP;AACH;;AA/CmC;;AAiDxC,SAASrB,cAAT","sourcesContent":["import { BaseSource } from \"../BaseSource.js\";\nimport { TextStyle } from \"../../textStyle.js\";\nimport { serializeCloudinaryCharacters } from \"../../../internal/utils/serializeCloudinaryCharacters.js\";\nimport { Action } from \"../../../internal/Action.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @memberOf Qualifiers.Source\n * @extends {Qualifiers.Source.BaseSource}\n * @description Defines the common interface for all text-based sources\n */\nclass BaseTextSource extends BaseSource {\n    constructor(text, textStyle) {\n        super();\n        this.type = 'text';\n        this.text = text;\n        this._textStyle = textStyle;\n        this._qualifierModel.sourceType = 'text';\n        this._qualifierModel.text = text;\n        if (textStyle instanceof TextStyle) {\n            this._qualifierModel.textStyle = textStyle.toJson();\n        }\n    }\n    encodeText(text) {\n        return serializeCloudinaryCharacters(text);\n    }\n    textColor(color) {\n        this._textColor = color;\n        this._qualifierModel.textColor = color;\n        return this;\n    }\n    backgroundColor(bgColor) {\n        this._backgroundColor = bgColor;\n        this._qualifierModel.backgroundColor = bgColor;\n        return this;\n    }\n    textFit(textFit) {\n        this._textFit = textFit;\n        return this;\n    }\n    /**\n     * @description\n     * Returns the opening string of the layer,\n     * This method is used internally within {@link SDK.LayerAction|LayerAction}\n     * @returns {string}\n     */\n    getOpenSourceString(layerType) {\n        const layerParam = [\n            this.type,\n            this._textStyle && this._textStyle.toString(),\n            this.encodeText(this.text)\n        ].filter((a) => a).join(':');\n        const tmpAction = new Action();\n        tmpAction.addQualifier(new Qualifier(layerType, layerParam));\n        this._textColor && tmpAction.addQualifier(new Qualifier('co', prepareColor(this._textColor)));\n        this._backgroundColor && tmpAction.addQualifier(new Qualifier('b', prepareColor(this._backgroundColor)));\n        this._textFit && tmpAction.addQualifier(this._textFit);\n        return tmpAction.toString();\n    }\n}\nexport { BaseTextSource };\n"]},"metadata":{},"sourceType":"module"}