{"ast":null,"code":"/**\n * @description Contains functions to select the mode when using a progressive format.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/transformation_reference#fl_progressive|Progressive modes}\n * @memberOf Qualifiers\n * @namespace Progressive\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\n * import {jpg} from \"@cloudinary/url-gen/qualifiers/format\";\n * import {steep} from \"@cloudinary/url-gen/qualifiers/progressive\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(format(jpg()).progressive(steep()))\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\n\nclass ProgressiveQualifier extends FlagQualifier {\n  constructor(mode) {\n    super('progressive', mode);\n  }\n\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\n\n\nfunction none() {\n  return new ProgressiveQualifier('none');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\n\n\nfunction semi() {\n  return new ProgressiveQualifier('semi');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\n\n\nfunction steep() {\n  return new ProgressiveQualifier('steep');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\n\n\nfunction progressive() {\n  return new ProgressiveQualifier();\n}\n\nconst Progressive = {\n  semi,\n  none,\n  steep,\n  progressive,\n  ProgressiveQualifier\n};\nexport { Progressive, semi, none, steep, progressive, ProgressiveQualifier };","map":{"version":3,"sources":["C:/Users/sonhe/OneDrive/Desktop/New folder/nhom6-csdlnc/client/node_modules/@cloudinary/url-gen/qualifiers/progressive.js"],"names":["FlagQualifier","ProgressiveQualifier","constructor","mode","none","semi","steep","progressive","Progressive"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAT,QAA8B,yBAA9B;;AACA,MAAMC,oBAAN,SAAmCD,aAAnC,CAAiD;AAC7CE,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,UAAM,aAAN,EAAqBA,IAArB;AACH;;AAH4C;AAKjD;AACA;AACA;;;AACA,SAASC,IAAT,GAAgB;AACZ,SAAO,IAAIH,oBAAJ,CAAyB,MAAzB,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAASI,IAAT,GAAgB;AACZ,SAAO,IAAIJ,oBAAJ,CAAyB,MAAzB,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAASK,KAAT,GAAiB;AACb,SAAO,IAAIL,oBAAJ,CAAyB,OAAzB,CAAP;AACH;AACD;AACA;AACA;;;AACA,SAASM,WAAT,GAAuB;AACnB,SAAO,IAAIN,oBAAJ,EAAP;AACH;;AACD,MAAMO,WAAW,GAAG;AAChBH,EAAAA,IADgB;AAEhBD,EAAAA,IAFgB;AAGhBE,EAAAA,KAHgB;AAIhBC,EAAAA,WAJgB;AAKhBN,EAAAA;AALgB,CAApB;AAOA,SAASO,WAAT,EAAsBH,IAAtB,EAA4BD,IAA5B,EAAkCE,KAAlC,EAAyCC,WAAzC,EAAsDN,oBAAtD","sourcesContent":["/**\n * @description Contains functions to select the mode when using a progressive format.\n * <b>Learn more</b>: {@link https://cloudinary.com/documentation/transformation_reference#fl_progressive|Progressive modes}\n * @memberOf Qualifiers\n * @namespace Progressive\n * @example\n * import {Cloudinary} from \"@cloudinary/url-gen\";\n * import {format} from \"@cloudinary/url-gen/actions/delivery\";\n * import {jpg} from \"@cloudinary/url-gen/qualifiers/format\";\n * import {steep} from \"@cloudinary/url-gen/qualifiers/progressive\";\n *\n * const yourCldInstance = new Cloudinary({cloud: {cloudName: 'demo'}});\n * const image = yourCldInstance.image('woman');\n * image.delivery(format(jpg()).progressive(steep()))\n */\nimport { FlagQualifier } from \"./flag/FlagQualifier.js\";\nclass ProgressiveQualifier extends FlagQualifier {\n    constructor(mode) {\n        super('progressive', mode);\n    }\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction none() {\n    return new ProgressiveQualifier('none');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction semi() {\n    return new ProgressiveQualifier('semi');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction steep() {\n    return new ProgressiveQualifier('steep');\n}\n/**\n * @memberOf Qualifiers.Progressive\n */\nfunction progressive() {\n    return new ProgressiveQualifier();\n}\nconst Progressive = {\n    semi,\n    none,\n    steep,\n    progressive,\n    ProgressiveQualifier\n};\nexport { Progressive, semi, none, steep, progressive, ProgressiveQualifier };\n"]},"metadata":{},"sourceType":"module"}